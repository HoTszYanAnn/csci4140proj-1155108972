{"version":3,"sources":["MineSweeper/Minesweeper.js","AI/MCTS.js","MineSweeper/GameBoard.js"],"names":["x","createArroundMineValueArray","mine","arr","Array","fill","i","length","j","id","Math","floor","random","calculateMinesAround","cells","mineValue","mines","perSweep","hp","cPlayer","currentValue","console","log","Minesweeper","name","setup","randomMine","presetPlayersMine","playersMine","currentMine","numPlayers","boardx","boardy","gameover","moves","sweep","G","ctx","currentPlayer","selectMine","value","placeMine","changeBoardShowing","a","turn","onEnd","full","winner","end","endIf","_","require","Node","game","parent","move","depth","mcts","placeActive","this","wins","visits","children","player","Infinity","sqrt","performMove","getPossibleMoves","node","cloneDeep","push","getChildren","y","orginalhp","shuffle","sortBy","nodeSort","last","haveMine","abs","sum","inBoard","MCTS","aiMine","orginalMineArray","orginalCells","getUCB1","winnerarr","rounds","ai","time","rootNode","val","minable","undefined","randomWrongFlag","randomizeBoardAIMine","randomizeBoard","fillMinable","minableRandomID","nullArray","k","m","item","minusCellValue","currentNode","d","Date","start","getTime","randomizeMine","isEmpty","nextMove","getWinner","count0","count1","GameBoard","props","AImove","state","selectMove","events","endTurn","onClick","isActive","isMyTurn","sweepActive","selectActive","isAITurn","bothai","playerID","isSelected","isCurrentValue","changeable","aiFirstMove","prevProps","setState","setTimeout","boardStyle","minebtns","board","key","style","display","flexDirection","paddingRight","alignSelf","mineBtnClass","className","idClass","valueShow","marginBottom","gameMetadata","color","margin","text-align","justifyContent","Component"],"mappings":"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","file":"static/js/2.1780e612.chunk.js","sourcesContent":["const x = 16;\r\nconst y = 9;\r\n\r\nconst createRandomMinedArray = () => {\r\n    const arr = Array(x * y).fill(null);\r\n    return arr;\r\n}\r\n\r\nconst createArroundMineValueArray = (mine) => {\r\n    const arr = Array(x * y).fill(null);\r\n    for (let i = 0; i < mine.length; i++) {\r\n        for (let j = 0; j < mine[i]; j++) {\r\n            var id = 0\r\n            do {\r\n                id = Math.floor(Math.random() * x * y);\r\n            } while (arr[id] != null)\r\n            arr[id] = i + 1;\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst calculateMinesAround = (cells, mineValue, id) => {\r\n    let mines = 0;\r\n    if (mineValue[id - 1] && mineValue[id - 1] > 0 && (id % x != 0)) {\r\n        mines = mines + mineValue[id - 1];\r\n    }\r\n    if (mineValue[id + 1] && mineValue[id + 1] > 0 && (id % x != x - 1)) {\r\n        mines = mines + mineValue[id + 1];\r\n    }\r\n    if (mineValue[id + x - 1] && mineValue[id + x - 1] > 0 && (id % x != 0)) {\r\n        mines = mines + mineValue[id + x - 1];\r\n    }\r\n    if (mineValue[id + x] && mineValue[id + x] > 0) {\r\n        mines = mines + mineValue[id + x];\r\n    }\r\n    if (mineValue[id + x + 1] && mineValue[id + x + 1] > 0 && (id % x != x - 1)) {\r\n        mines = mines + mineValue[id + x + 1];\r\n    }\r\n    if (mineValue[id - x - 1] && mineValue[id - x - 1] > 0 && (id % x != 0)) {\r\n        mines = mines + mineValue[id - x - 1];\r\n    }\r\n    if (mineValue[id - x] && mineValue[id - x] > 0) {\r\n        mines = mines + mineValue[id - x];\r\n    }\r\n    if (mineValue[id - x + 1] && mineValue[id - x + 1] > 0 && (id % x != x - 1)) {\r\n        mines = mines + mineValue[id - x + 1];\r\n    }\r\n    return mines;\r\n}\r\nconst perSweep = (mineValue, id, cells, hp, cPlayer, currentValue) => {\r\n    if (cells[id] || cells[id] == 0) {\r\n\r\n    } else if (mineValue[id] > 0) {\r\n        cells[id] = calculateMinesAround(cells, mineValue, id);\r\n        console.log('mine' + '+' + cells[id] + '+' + mineValue[id]);\r\n        hp[cPlayer] = hp[cPlayer] - mineValue[id];\r\n        if (hp[cPlayer] < 0) {\r\n            hp[cPlayer] = 0;\r\n        }\r\n        currentValue[id] = 1;\r\n    } else {\r\n        cells[id] = calculateMinesAround(cells, mineValue, id);\r\n    }\r\n}\r\nconst end = (hp, cells) => {\r\n    let full = true\r\n    for (let i = 0; i < x * y; i++) {\r\n        if (cells[i] == null) {\r\n            full = false\r\n            break;\r\n        }\r\n    }\r\n    if (hp[0] <= 0)\r\n        return { winner: 1 };\r\n    else if (hp[1] <= 0)\r\n        return { winner: 0 };\r\n    else if (full) {\r\n        if (hp[0] < hp[1])\r\n            return { winner: 1 };\r\n        else if (hp[1] < hp[0])\r\n            return { winner: 0 };\r\n        else\r\n            return { winner: 1 };\r\n    }\r\n    return false;\r\n}\r\n\r\nconst Minesweeper = {\r\n    name: 'minesweeper',\r\n    setup: () => ({\r\n        cells: createRandomMinedArray(),\r\n        mineValue: createArroundMineValueArray([6, 4, 2]),\r\n        randomMine: [6, 4, 2],\r\n        presetPlayersMine: [1, 1, 1, 1, 1],\r\n        playersMine: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n        currentValue: Array(x * y).fill(null),\r\n        currentMine: null,\r\n        numPlayers: 2,\r\n        hp: Array(2).fill(10),\r\n        boardx: x,\r\n        boardy: y,\r\n        gameover: null\r\n    }),\r\n    moves: {\r\n        sweep(G, ctx, id) {\r\n            let cells = [...G.cells];\r\n            let mineValue = [...G.mineValue];\r\n            let currentValue = [...G.currentValue];\r\n            let cPlayer = ctx.currentPlayer;\r\n            let hp = [...G.hp];\r\n            currentValue[id] = 0;\r\n            perSweep(mineValue, id, cells, hp, cPlayer, currentValue);\r\n            if (id % x != x - 1) {\r\n                perSweep(mineValue, id + 1, cells, hp, cPlayer, currentValue);\r\n                //perSweep(mineValue, id+x+1, cells, hp, cPlayer, currentValue);\r\n                //perSweep(mineValue, id-x+1, cells, hp, cPlayer, currentValue);\r\n            }\r\n            if (id % x != 0) {\r\n                perSweep(mineValue, id - 1, cells, hp, cPlayer, currentValue);\r\n                //perSweep(mineValue, id+x-1, cells, hp, cPlayer, currentValue);\r\n                //perSweep(mineValue, id-x-1, cells, hp, cPlayer, currentValue);\r\n            }\r\n            perSweep(mineValue, id + x, cells, hp, cPlayer, currentValue);\r\n            perSweep(mineValue, id - x, cells, hp, cPlayer, currentValue);\r\n            return { ...G, cells, mineValue, hp, currentValue };\r\n        },\r\n        selectMine(G, ctx, value) {\r\n            let currentMine = G.currentMine;\r\n            console.log('select');\r\n            if (currentMine == value) {\r\n                currentMine = null;\r\n            } else {\r\n                currentMine = value;\r\n            }\r\n            return { ...G, currentMine };\r\n        },\r\n\r\n        placeMine(G, ctx, id, value) {\r\n            let mineValue = [...G.mineValue];\r\n            let cPlayer = ctx.currentPlayer;\r\n            let playersMine = [...G.playersMine];\r\n            let currentMine = value || G.currentMine;\r\n            mineValue[id] = mineValue[id] + currentMine;\r\n            playersMine[cPlayer * 5 + currentMine - 1]--;\r\n            currentMine = null;\r\n            return { ...G, mineValue, currentMine, playersMine };\r\n        },\r\n        changeBoardShowing(G, ctx, id) {\r\n            let currentValue = [...G.currentValue];\r\n            let a = currentValue[id];\r\n            a = a ^ 1;\r\n            currentValue[id] = a;\r\n            return { ...G, currentValue };\r\n        }\r\n    },\r\n    turn: {\r\n        onEnd: (G, ctx) => {\r\n            G.gameover = end(G.hp, G.cells);\r\n            if (G.gameover) {\r\n                for (let i = 0; i < x * y; i++) {\r\n                    G.cells[i] = calculateMinesAround(G.cells, G.mineValue, i);\r\n                    G.currentValue[i] = 0;\r\n                    if (G.mineValue[i])\r\n                        G.currentValue[i] = 1;\r\n                }\r\n            }\r\n        },\r\n    },\r\n    endIf: (G, ctx) => {\r\n    },\r\n};\r\n\r\nexport default Minesweeper;","var _ = require('lodash');\r\n\r\nclass Node {\r\n  constructor(game, parent, move, depth, mcts) {\r\n    this.game = game;\r\n    this.mcts = mcts;\r\n    this.parent = parent;\r\n    this.move = move;\r\n    this.wins = [];\r\n    this.visits = 0;\r\n    this.children = null;\r\n    this.depth = depth || 0;\r\n  }\r\n\r\n  getUCB1(player) {\r\n    let scorePerVisit = 0;\r\n    // always visit unvisited nodes first\r\n    if (this.visits == 0) return Infinity;\r\n    if (!this.parent) {\r\n      return 0;\r\n    }\r\n    scorePerVisit = (this.wins[player] || 0) / this.visits;\r\n    return scorePerVisit + Math.sqrt(2 * Math.log(this.parent.visits) / this.visits);\r\n  }\r\n\r\n  getChildren() {\r\n    if (this.children === null) {\r\n      if (this.move !== null) {\r\n        this.performMove(this.move);\r\n        // console.log(\"move\");\r\n        // console.log(this.move)\r\n        // console.log(this.game.G.cells)\r\n        //console.log(this.game.G.hp)\r\n        //console.log(this.game.G.mineValue)\r\n        //console.log(this.depth+\" \"+this.move)\r\n      }\r\n      var moves = this.getPossibleMoves();\r\n      this.children = []\r\n      for (let i = 0; i < moves.length; i++) {\r\n        let node = new Node(_.cloneDeep(this.game), this, moves[i], this.depth + 1, this.mcts)\r\n        this.children.push(node)\r\n      }\r\n      //console.log(this.children)\r\n    }\r\n    return this.children;\r\n  }\r\n\r\n  getWinner() {\r\n    // forces the move to be performed\r\n    this.getChildren();\r\n    let x = this.game.G.boardx\r\n    let y = this.game.G.boardy\r\n    let full = true\r\n    for (let i = 0; i < x * y; i++) {\r\n      if (this.game.G.cells[i] == null) {\r\n        full = false\r\n        break;\r\n      }\r\n    }\r\n    /*if (this.parent && this.parent.children.length < (x * y / 3)) {\r\n     \r\n      if (this.game.G.hp[0] <= 0) {\r\n        return 1;\r\n      }\r\n      else if (this.game.G.hp[1] <= 0) {\r\n        return 0;\r\n      }\r\n      else {\r\n        if (full) {\r\n          if (this.game.G.hp[0] < this.game.G.hp[1])\r\n            return { winner: 1 };\r\n          else if (this.game.G.hp[1] < this.game.G.hp[0])\r\n            return { winner: 0 };\r\n          else\r\n            return { winner: 1 };\r\n        } else {\r\n          //console.log(this.game.G.cells)\r\n        }\r\n      }\r\n    }\r\n    else {*/\r\n      if (this.game.G.hp[0] <= this.mcts.orginalhp[0] - 1 || this.game.G.hp[0] <= 0) {\r\n        return 1;\r\n      }\r\n      else if (this.game.G.hp[1] <= this.mcts.orginalhp[1] - 1 || this.game.G.hp[1] <= 0) {\r\n        return 0;\r\n      }\r\n      else {\r\n        if (full) {\r\n          if (this.game.G.hp[0] < this.game.G.hp[1])\r\n            return { winner: 1 };\r\n          else if (this.game.G.hp[1] < this.game.G.hp[0])\r\n            return { winner: 0 };\r\n          else\r\n            return { winner: 1 };\r\n        } else {\r\n          //console.log(this.game.G.cells)\r\n        }\r\n     // }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  nextMove() {\r\n    return _(this.getChildren()).shuffle().sortBy(this.mcts.nodeSort).last();\r\n  }\r\n\r\n  getPossibleMoves() {\r\n    let moves = []\r\n\r\n    //console.log(this.haveMine())\r\n    //console.log(this.game.G.playersMine);\r\n    //console.log(this.game.G.mineValue.length)\r\n    //console.log(1 - Math.abs(this.mcts.player - this.depth % 2));\r\n    if (this.haveMine()) {\r\n      for (let i = 0; i < this.game.G.mineValue.length * 2; i++) {\r\n        if (i < this.game.G.mineValue.length) {\r\n          if (this.game.G.cells[i] == null) {\r\n            moves.push(i)\r\n          }\r\n        } else {\r\n          if (this.placeActive(i - this.game.G.mineValue.length)) {\r\n            moves.push(i)\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.game.G.mineValue.length; i++) {\r\n        if (i < this.game.G.mineValue.length) {\r\n          if (this.game.G.cells[i] == null) {\r\n            moves.push(i)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //console.log(moves);\r\n    //console.log(moves);\r\n    //console.log(moves)\r\n    moves = _.shuffle(moves);\r\n    //console.log(moves)\r\n\r\n    return moves;\r\n  }\r\n  haveMine() {\r\n    let cPlayer = Math.abs(this.mcts.player - this.depth % 2)\r\n    //console.log(cPlayer)\r\n    let sum = 0\r\n    for (let i = 5 * cPlayer; i < 5 * cPlayer + 5; i++) {\r\n      sum = sum + this.game.G.playersMine[i]\r\n    }\r\n    if (sum > 0) return true\r\n    return false\r\n  }\r\n  placeActive = (id) => {\r\n    if (this.game.G.cells[id] || this.game.G.cells[id] == 0) return false;\r\n    if ((this.game.G.cells[id - 1] || this.game.G.cells[id - 1] == 0) && (id % this.game.G.boardx != 0)) return false;\r\n    if ((this.game.G.cells[id + 1] || this.game.G.cells[id + 1] == 0) && (id % this.game.G.boardx != this.game.G.boardx - 1)) return false;\r\n    if ((this.game.G.cells[id + this.game.G.boardx - 1] || this.game.G.cells[id + this.game.G.boardx - 1] == 0) && (id % this.game.G.boardx != 0)) return false;\r\n    if (this.game.G.cells[id + this.game.G.boardx] || this.game.G.cells[id + this.game.G.boardx] == 0) return false;\r\n    if ((this.game.G.cells[id + this.game.G.boardx + 1] || this.game.G.cells[id + this.game.G.boardx + 1] == 0) && (id % this.game.G.boardx != this.game.G.boardx - 1)) return false;\r\n    if ((this.game.G.cells[id - this.game.G.boardx - 1] || this.game.G.cells[id - this.game.G.boardx - 1] == 0) && (id % this.game.G.boardx != 0)) return false;\r\n    if (this.game.G.cells[id - this.game.G.boardx] || this.game.G.cells[id - this.game.G.boardx] == 0) return false;\r\n    if ((this.game.G.cells[id - this.game.G.boardx + 1] || this.game.G.cells[id - this.game.G.boardx + 1] == 0) && (id % this.game.G.boardx != this.game.G.boardx - 1)) return false;\r\n    return true;\r\n  }\r\n  performMove(id) {\r\n    let cPlayer = 1 - Math.abs(this.mcts.player - this.depth % 2)\r\n    //console.log(cPlayer)\r\n    if (id < this.game.G.mineValue.length) {\r\n      let x = this.game.G.boardx\r\n      this.game.G.cells[id] = this.calculateMinesAround(id)\r\n      if (this.mcts.inBoard(id + 1) && (id % x != x - 1) && this.game.G.cells[id + 1] == null) this.game.G.cells[id + 1] = this.calculateMinesAround(id + 1)\r\n      if (this.mcts.inBoard(id - 1) && (id % x != 0) && this.game.G.cells[id - 1] == null) this.game.G.cells[id - 1] = this.calculateMinesAround(id - 1)\r\n      if (this.mcts.inBoard(id + x) && this.game.G.cells[id + x] == null) this.game.G.cells[id + x] = this.calculateMinesAround(id + x)\r\n      if (this.mcts.inBoard(id - x) && this.game.G.cells[id - x] == null) this.game.G.cells[id - x] = this.calculateMinesAround(id - x)\r\n    } else {\r\n      id = id - this.game.G.mineValue.length\r\n      let mineValue = 0\r\n      //console.log(this.game.G.playersMine)\r\n      do {\r\n        mineValue = Math.floor(Math.random() * 5)\r\n      } while (this.game.G.playersMine[cPlayer * 5 + mineValue] <= 0)\r\n      this.game.G.mineValue[id] += mineValue + 1\r\n      this.game.G.playersMine[cPlayer * 5 + mineValue] -= 1\r\n    }\r\n  }\r\n\r\n  calculateMinesAround(id) {\r\n    let mines = 0;\r\n    let x = this.game.G.boardx\r\n    if (this.game.G.mineValue[id - 1] && this.game.G.mineValue[id - 1] > 0 && (id % x != 0)) {\r\n      mines = mines + this.game.G.mineValue[id - 1];\r\n    }\r\n    if (this.game.G.mineValue[id + 1] && this.game.G.mineValue[id + 1] > 0 && (id % x != x - 1)) {\r\n      mines = mines + this.game.G.mineValue[id + 1];\r\n    }\r\n    if (this.game.G.mineValue[id + x - 1] && this.game.G.mineValue[id + x - 1] > 0 && (id % x != 0)) {\r\n      mines = mines + this.game.G.mineValue[id + x - 1];\r\n    }\r\n    if (this.game.G.mineValue[id + x] && this.game.G.mineValue[id + x] > 0) {\r\n      mines = mines + this.game.G.mineValue[id + x];\r\n    }\r\n    if (this.game.G.mineValue[id + x + 1] && this.game.G.mineValue[id + x + 1] > 0 && (id % x != x - 1)) {\r\n      mines = mines + this.game.G.mineValue[id + x + 1];\r\n    }\r\n    if (this.game.G.mineValue[id - x - 1] && this.game.G.mineValue[id - x - 1] > 0 && (id % x != 0)) {\r\n      mines = mines + this.game.G.mineValue[id - x - 1];\r\n    }\r\n    if (this.game.G.mineValue[id - x] && this.game.G.mineValue[id - x] > 0) {\r\n      mines = mines + this.game.G.mineValue[id - x];\r\n    }\r\n    if (this.game.G.mineValue[id - x + 1] && this.game.G.mineValue[id - x + 1] > 0 && (id % x != x - 1)) {\r\n      mines = mines + this.game.G.mineValue[id - x + 1];\r\n    }\r\n    if (this.game.G.mineValue[id] !== null)\r\n      this.game.G.hp[Math.abs(this.mcts.player - this.depth % 2)] -= this.game.G.mineValue[id]\r\n    return mines;\r\n  }\r\n}\r\n\r\n\r\nclass MCTS {\r\n  constructor(game, aiMine) {\r\n    this.aiMine = aiMine\r\n    this.game = _.cloneDeep(game);\r\n    this.orginalMineArray = _.cloneDeep(this.game.G.mineValue);\r\n    this.orginalCells = _.cloneDeep(this.game.G.cells)\r\n    this.nodeSort = function (node) {\r\n      if (node.parent) return node.getUCB1(1 - Math.abs(node.mcts.player - node.parent.depth % 2));\r\n      return 0;\r\n    };\r\n    this.winnerarr = []\r\n    this.orginalhp = _.cloneDeep(this.game.G.hp);\r\n    this.rounds = this.game.ai.time || 15;\r\n    console.log(this.rounds)\r\n    this.player = this.game.ctx.currentPlayer || 0;\r\n    this.rootNode = new Node(this.game, null, null, 0, this);\r\n  }\r\n\r\n  inBoard(id) {\r\n    let x = this.game.G.boardx\r\n    let y = this.game.G.boardy\r\n    if (id >= 0 && id < x * y) return true\r\n    return false\r\n  }\r\n\r\n  fillMinable(id, val, minable) {\r\n    let x = this.game.G.boardx\r\n    if (id % x != 0 && this.inBoard(id - 1 - x)) if (minable[id - 1 - x] === null || minable[id - 1 - x] > val) minable[id - 1 - x] = val;\r\n    if (this.inBoard(id - x)) if (minable[id - x] === null || minable[id - x] > val) minable[id - x] = val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1 - x)) if (minable[id + 1 - x] === null || minable[id + 1 - x] > val) minable[id + 1 - x] = val;\r\n    if (id % x != 0 && this.inBoard(id - 1)) if (minable[id - 1] === null || minable[id - 1] > val) minable[id - 1] = val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1)) if (minable[id + 1] === null || minable[id + 1] > val) minable[id + 1] = val;\r\n    if (id % x != 0 && this.inBoard(id - 1 + x)) if (minable[id - 1 + x] === null || minable[id - 1 + x] > val) minable[id - 1 + x] = val;\r\n    if (this.inBoard(id + x)) if (minable[id + x] === null || minable[id + x] > val) minable[id + x] = val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1 + x)) if (minable[id + 1 + x] === null || minable[id + 1 + x] > val) minable[id + 1 + x] = val;\r\n    return minable;\r\n  }\r\n\r\n  minusCellValue(id, val, cells) {\r\n    let x = this.game.G.boardx\r\n    if (id % x != 0 && this.inBoard(id - 1 - x)) if (cells[id - 1 - x] != null) cells[id - 1 - x] -= val;\r\n    if (this.inBoard(id - x)) if (cells[id - x] != null) cells[id - x] -= val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1 - x)) if (cells[id + 1 - x] != null) cells[id + 1 - x] -= val;\r\n    if (id % x != 0 && this.inBoard(id - 1)) if (cells[id - 1] != null) cells[id - 1] -= val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1)) if (cells[id + 1] != null) cells[id + 1] -= val;\r\n    if (id % x != 0 && this.inBoard(id - 1 + x)) if (cells[id - 1 + x] != null) cells[id - 1 + x] -= val;\r\n    if (this.inBoard(id + x)) if (cells[id + x] != null) cells[id + x] -= val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1 + x)) if (cells[id + 1 + x] != null) cells[id + 1 + x] -= val;\r\n    return cells;\r\n  }\r\n  randomizeMine() {\r\n    let mine = [0, 0, 0, 0, 0]\r\n    let x = this.game.G.boardx\r\n    let y = this.game.G.boardy\r\n\r\n    // count onBoard Mine\r\n    for (let i = 0; i < 5; i++) {\r\n      if (this.game.G.randomMine[i] != undefined) {\r\n        mine[i] = this.game.G.randomMine[i];\r\n      }\r\n    }\r\n    for (let i = 0; i < 10; i++) {\r\n      if (i < 5) {\r\n        mine[i] += this.game.G.presetPlayersMine[i] - this.game.G.playersMine[i];\r\n      } else {\r\n        mine[i - 5] += this.game.G.presetPlayersMine[i - 5] - this.game.G.playersMine[i];\r\n      }\r\n    }\r\n\r\n    let randomWrongFlag = false\r\n    let randomizeBoardAIMine = Array(x * y).fill(null);\r\n    //aiMine place\r\n    for (let i = 0; i < this.aiMine.length; i++) {\r\n      randomizeBoardAIMine[this.aiMine[i][0]] += this.aiMine[i][1]\r\n      mine[this.aiMine[i][1] - 1] -= 1\r\n    }\r\n    let randomizeBoard = randomizeBoardAIMine\r\n\r\n\r\n    // found minable place\r\n    /*let knownMine = Array(x * y).fill(null);\r\n      for (let i = 0; i < knownMine.length; i++) {\r\n        if (this.orginalCells[i] != null && this.orginalMineArray[i] != null)\r\n          knownMine[i] = this.orginalMineArray[i];\r\n    }\r\n    console.log(knownMine);\r\n    */\r\n   let minable = Array(x * y).fill(null);\r\n    do {\r\n      randomWrongFlag = false\r\n      let cells = _.cloneDeep(this.orginalCells)\r\n      // initize randomize board\r\n      randomizeBoard = randomizeBoardAIMine\r\n      //random process\r\n      for (let i = mine.length - 1; i >= 0; i--) {\r\n        for (let j = 0; j < mine[i]; j++) {\r\n          // minable place and it maximum value\r\n          minable = Array(x * y).fill(null);\r\n          for (let id = 0; id < minable.length; id++) {\r\n            if (cells[id] >= 0 && cells[id] != null) {\r\n              minable = this.fillMinable(id, cells[id], minable)\r\n            }\r\n          }\r\n          let minableRandomID = []\r\n          let nullArray = []\r\n          // init the random list (adjust weighting, larger value have a largest weighting)\r\n          for (let id = 0; id < minable.length; id++) {\r\n            if (minable[id] >= i + 1) {\r\n              for (let k = 0; k < minable[id]; k++) {\r\n                // weighting higher\r\n                for (let m = 0; m < 10; m++)\r\n                  minableRandomID.push(id);\r\n              }\r\n            } else if (minable[id] == null) {\r\n              nullArray.push(id);\r\n            }\r\n          }\r\n          if (nullArray.length != 0)\r\n            for (let k = 0; k < 2; k++)\r\n              minableRandomID.push(-1);\r\n\r\n          // check error (if yes loop again)\r\n          if (minableRandomID.length == 0) {\r\n            randomWrongFlag = true;\r\n            break;\r\n          }\r\n          //random choose 1 in list\r\n          let item = minableRandomID[Math.floor(Math.random() * minableRandomID.length)];\r\n          if (item == -1)\r\n            randomizeBoard[nullArray[Math.floor(Math.random() * nullArray.length)]] += 1 + 1\r\n          else\r\n            randomizeBoard[item] += i + 1;\r\n          // surrounded minable value minus val\r\n          cells = this.minusCellValue(item, i + 1, cells);\r\n        }\r\n        if (randomWrongFlag) {\r\n          break;\r\n        }\r\n      }\r\n      /*if (!randomWrongFlag)\r\n        for (let i = 0; i< x*y; i++){\r\n          if (knownMine[i] !== null) {\r\n            if (knownMine[i] !== randomizeBoard[i]){\r\n              randomWrongFlag = true;\r\n              break;\r\n            }\r\n          }\r\n        }*/\r\n    } while (randomWrongFlag);\r\n    for(let i = 0; i < x*y; i++){\r\n      if (minable[i] == null && randomizeBoard[i] == null){\r\n        if (Math.floor(Math.random()* 3)){\r\n          randomizeBoard[i] = 1;\r\n        }\r\n      }\r\n    }\r\n    this.game.G.mineValue = _.cloneDeep(randomizeBoard)\r\n    //return finish randomize board\r\n    return;\r\n  }\r\n\r\n  selectMove() {\r\n    let round, currentNode;\r\n    var d = new Date();\r\n    var start = d.getTime();\r\n    var i = 0\r\n    do {\r\n      i += 1\r\n      d = new Date();\r\n      var end = d.getTime();\r\n      //for (round = 0; round < this.rounds; round += 1) {\r\n      currentNode = this.rootNode;\r\n      this.rootNode.visits += 1;\r\n      this.randomizeMine();\r\n      while (!_.isEmpty(currentNode.getChildren())) {\r\n        currentNode = currentNode.nextMove();\r\n        currentNode.visits += 1;\r\n        if (currentNode.getWinner() === 0 || currentNode.getWinner() === 1)\r\n          break;\r\n      }\r\n      let winner = currentNode.getWinner();\r\n      this.winnerarr.push(winner)\r\n      while (currentNode) {\r\n        currentNode.wins[winner] = (currentNode.wins[winner] || 0) + 1;\r\n        currentNode = currentNode.parent;\r\n      }\r\n      //console.log(i)\r\n    } while (end - start < this.rounds * 1000)\r\n    var count0 = 0;\r\n    var count1 = 0;\r\n    for (var i = 0; i < this.winnerarr.length; ++i) {\r\n      if (this.winnerarr[i] == 0)\r\n        count0++;\r\n      else\r\n        count1++\r\n    }\r\n    console.log(_(this.rootNode.getChildren()).sortBy('visits').last().wins)\r\n    console.log(\"loop \" + i)\r\n    console.log(this.rootNode.children.length)\r\n    console.log(_(this.rootNode.getChildren()).sortBy('visits').last().visits)\r\n    return _(this.rootNode.getChildren()).sortBy('visits').last().move;\r\n  }\r\n}\r\nexport default MCTS;","import React, { Component } from 'react';\nimport './GameBoard.css';\nimport {  LoopCircleLoading } from 'react-loadingg';\nimport MCTS from '../AI/MCTS'\nclass GameBoard extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            aiMine:[[],[]],\n            aiFirstMove:false\n        }\n    }\n    componentDidMount(prevProps){\n        if ((this.props.ai !== undefined|| this.props.bothai )&& this.props.ctx.turn == 1 && !this.props.aiFirstMove){\n            if (this.isAITurn()){\n                this.setState({aiFirstMove : true})\n                console.log(this.props.ctx.currentPlayer)\n                setTimeout(() => {\n                    this.AImove()\n                }, 1000);\n            }\n        }\n    }\n    componentDidUpdate(prevProps){\n        if ((this.props.ai !== undefined || this.props.bothai) && prevProps.ctx.currentPlayer != this.props.ctx.currentPlayer && !this.props.G.gameover){\n            if (this.isAITurn()){\n                console.log(this.props.ctx.currentPlayer)\n                setTimeout(() => {\n                    this.AImove()\n                }, 1000);\n            }\n        }\n    }\n\n    AImove = () => {\n        console.log('AITURN')\n        let mcts = new MCTS(this.props, this.state.aiMine[this.props.ctx.currentPlayer])\n        var id = mcts.selectMove();\n        if (id < this.props.G.mineValue.length){\n            console.log(\"sweep \"+id)\n            this.props.moves.sweep(id);\n        } else {\n            let value = 0\n            do{\n                value = Math.floor(Math.random() * 5)\n            }while (this.props.G.playersMine[this.props.ctx.currentPlayer * 5 + value] == 0)\n            this.state.aiMine[this.props.ctx.currentPlayer].push([id- this.props.G.boardx *this.props.G.boardy,value+1])\n            console.log(this.state.aiMine);\n            this.props.moves.placeMine(id- this.props.G.boardx *this.props.G.boardy, value + 1);\n        }\n        this.props.events.endTurn();\n    }\n\n    onClick = (id, a) => {\n        if (this.isActive() && this.isMyTurn()) {\n            if (!this.props.G.currentMine) {\n                if (this.sweepActive(id)) {\n                    this.props.moves.sweep(id);\n                    this.props.events.endTurn();\n                } else {\n                    if (this.props.G.mineValue[id] && this.props.G.cells[id] != 0) {\n                        this.props.moves.changeBoardShowing(id);\n                        //console.log('change');\n                    }\n                }\n            } else {\n                if (this.placeActive(id)) {\n                    this.props.moves.placeMine(id);\n                    this.props.events.endTurn();\n                }\n            }\n        } else if (this.props.G.mineValue[id] && this.props.G.cells[id] != 0) {\n            this.props.moves.changeBoardShowing(id);\n            //console.log('change');\n        }\n    }\n    selectMine = (value) => {\n        if (this.isActive() && this.selectActive(value)) {\n            this.props.moves.selectMine(value);\n        }\n    }\n\n    isAITurn = () =>{\n        if (this.props.bothai) return true;\n        if (this.props.ai === undefined) return false\n        if (this.props.ai.id == this.props.ctx.currentPlayer) return true;\n        return false;\n    }\n    isMyTurn = () =>{\n        if (this.props.playerID == this.props.ctx.currentPlayer) return true;\n        return false;\n    }\n    isActive = () => {\n        if (this.props.G.gameover) return false;\n        return true;\n    }\n    sweepActive = (id) => {\n        if (this.props.G.cells[id] || this.props.G.cells[id] == 0) return false;\n        return true;\n    }\n    placeActive = (id) => {\n        if (this.props.G.cells[id] || this.props.G.cells[id] == 0) return false;\n        if ((this.props.G.cells[id - 1] || this.props.G.cells[id - 1] == 0) && (id % this.props.G.boardx != 0)) return false;\n        if ((this.props.G.cells[id + 1] || this.props.G.cells[id + 1] == 0) && (id % this.props.G.boardx != this.props.G.boardx - 1)) return false;\n        if ((this.props.G.cells[id + this.props.G.boardx - 1] || this.props.G.cells[id + this.props.G.boardx - 1] == 0) && (id % this.props.G.boardx != 0)) return false;\n        if (this.props.G.cells[id + this.props.G.boardx] || this.props.G.cells[id + this.props.G.boardx] == 0) return false;\n        if ((this.props.G.cells[id + this.props.G.boardx + 1] || this.props.G.cells[id + this.props.G.boardx + 1] == 0) && (id % this.props.G.boardx != this.props.G.boardx - 1)) return false;\n        if ((this.props.G.cells[id - this.props.G.boardx - 1] || this.props.G.cells[id - this.props.G.boardx - 1] == 0) && (id % this.props.G.boardx != 0)) return false;\n        if (this.props.G.cells[id - this.props.G.boardx] || this.props.G.cells[id - this.props.G.boardx] == 0) return false;\n        if ((this.props.G.cells[id - this.props.G.boardx + 1] || this.props.G.cells[id - this.props.G.boardx + 1] == 0) && (id % this.props.G.boardx != this.props.G.boardx - 1)) return false;\n        return true;\n    }\n    selectActive = (value) => {\n        if (this.props.G.playersMine[value + this.props.ctx.currentPlayer * 5 - 1] == 0) return false;\n        return true;\n    }\n\n    isSelected = (value) => {\n        if (this.props.G.currentMine == value) return true;\n        return false;\n    }\n    isCurrentValue = (value) => {\n        if (this.props.G.currentValue[value]) return true;\n        return false;\n    }\n    changeable = (value) => {\n        if (this.props.G.mineValue[value] && this.props.G.cells[value] && this.props.G.cells[value] != 0) return true;\n        return false;\n    }\n    render() {\n        let winner = '';\n        let boardStyle = \"selectDisable gameBoardTable gameBoardCell\";\n        if (this.props.G.currentMine && this.props.ctx.currentPlayer == this.props.playerID) {\n            boardStyle = boardStyle + ' gameBoardSelectedMine';\n        }\n        if (this.props.G.gameover) {\n            winner = this.props.G.gameover.winner\n        }\n        let minebtns = [];\n        let board = [];\n        if (this.props.bothai){\n            minebtns.push(\n                <div key=\"textbtn\" style={{ display: 'flex', flexDirection: 'column', paddingRight: '1rem' }} >\n                    <div style={{ alignSelf: 'flex-end' }}>Mine:</div>\n                    <div style={{ alignSelf: 'flex-end' }}>AI 1:</div>\n                    <div style={{ alignSelf: 'flex-end' }}>AI 2:</div>\n                </div>\n            );\n        }else{\n        minebtns.push(\n            <div key=\"textbtn\" style={{ display: 'flex', flexDirection: 'column', paddingRight: '1rem' }} >\n                <div style={{ alignSelf: 'flex-end' }}>Mine:</div>\n                <div style={{ alignSelf: 'flex-end' }}>Remains:</div>\n                <div style={{ alignSelf: 'flex-end' }}>Opponents:</div>\n            </div>\n        );\n        }\n        //btn\n        for (let i = 1; i < 6; i++) {\n            let mineBtnClass = null;\n            if (this.isSelected(i) && this.props.ctx.currentPlayer == this.props.playerID) {\n                mineBtnClass = \"minebtnStyle selectPressed mineBtnActive\";\n            } else if (this.selectActive(i) && this.isActive(i) && !this.isAITurn() && this.props.ctx.currentPlayer == this.props.playerID) {\n                mineBtnClass = \"minebtnStyle mineBtnActive\";\n            } else {\n                mineBtnClass = \"minebtnStyle\";\n            }\n            if (this.props.bothai){\n                minebtns.push(\n                    <div key={i} className=\"temp\">\n                        <div className={mineBtnClass}\n                            key={i}\n                            onClick={() => this.selectMine(i)}>\n                            {i}\n                        </div>\n                        <div className=\"remainMineValue\">{this.props.G.playersMine[i + 0 * 5 - 1]}</div>\n                        <div className=\"remainMineValue\">{this.props.G.playersMine[i + 1 * 5 - 1]}</div>\n                    </div>\n                );\n            }else{\n            minebtns.push(\n                <div key={i} className=\"temp\">\n                    <div className={mineBtnClass}\n                        key={i}\n                        onClick={() => this.selectMine(i)}>\n                        {i}\n                    </div>\n                    <div className=\"remainMineValue\">{this.props.G.playersMine[i + this.props.playerID * 5 - 1]}</div>\n                    <div className=\"remainMineValue\">{this.props.G.playersMine[i + (1-this.props.playerID) * 5 - 1]}</div>\n                </div>\n            );\n            }\n        }\n        //gameboard\n        for (let i = 0; i < this.props.G.boardy; i++) {\n            let cells = [];\n            for (let j = 0; j < this.props.G.boardx; j++) {\n                const id = i * this.props.G.boardx + j\n                let idClass = null;\n                let valueShow = null;\n                if (this.sweepActive(id) && this.isActive(id)) {\n                    idClass = \"cell cellActive\";\n                } else {\n                    idClass = \"cell\";\n                }\n                if (this.changeable(id)) {\n                    idClass = idClass + \" cellChangeable\";\n                }\n                if (this.isCurrentValue(id)) {\n                    valueShow = this.props.G.mineValue[id];\n                    idClass = idClass + \" showingMineValue\";\n                } else {\n                    if (this.props.G.cells[id] == 0)\n                        valueShow = \"\";\n                    else\n                        valueShow = this.props.G.cells[id];\n                }\n                cells.push(\n                    <td className=\"gameBoardCell\"\n                        key={id}\n                        onClick={() => this.onClick(id)}>\n                        <div className={idClass}>{valueShow}</div>\n                    </td>\n                );\n            }\n            board.push(<tr key={i} className=\"gameBoardCell\">{cells}</tr>);\n        }\n        //console.log(this.props);\n        return (\n            <div>\n                <div>\n                    <div style={{marginBottom:'1rem'}}>\n                    { (!winner && winner !== 0) && (\n                        <div>\n                            <div className=\"flexGroup\">\n                                <div className=\"game-detailgp\">\n                                    <div className=\"game-text\">{this.props.gameMetadata[0].name}</div>\n                                    <div className=\"game-text\">HP: {this.props.G.hp[0]}</div>\n                                </div>\n                                <div className=\"game-vs\">VS</div>\n                                <div className=\"game-detailgp\">\n                                    <div className=\"game-text\">{this.props.gameMetadata[1].name}</div>\n                                    <div className=\"game-text\">HP: {this.props.G.hp[1]}</div>\n                                </div>\n                            </div>\n                            { !this.props.bothai && <div className=\"game-text\">{this.props.playerID == this.props.ctx.currentPlayer && \"Your Turn\"}{this.props.playerID != this.props.ctx.currentPlayer && \"Opponent Turn\"}</div>}\n                            {this.props.bothai && <div className=\"game-text\">{this.props.gameMetadata[this.props.ctx.currentPlayer].name} turn </div>}\n                        </div>\n                    )}\n                    {!this.props.bothai &&\n                        (winner === 0 || winner ) &&\n                        <div className=\"subtitle\">\n                            {winner == this.props.playerID && \"Congratulations, You Win\"}\n                            {winner != this.props.playerID && winner >= 0 && \"Oops, You Lose\"}\n                        </div>\n                    }\n                    {this.props.bothai && (winner === 0 || winner ) &&\n                        <div className=\"subtitle\">\n                            {this.props.gameMetadata[winner].name }win\n                        </div>\n                    }\n                    </div>\n                    {( this.isAITurn() && !this.props.G.gameover && <LoopCircleLoading  color=\"#34ffff\"/>)}\n                    <table id=\"board\" className={boardStyle} style={{ margin: \"0 auto\" }}>\n                        <tbody>{board}</tbody>\n                    </table>\n                </div>\n                <br />\n                <div className=\"minebtnGroups selectDisable game-text\" text-align=\"center\" style={{ display: 'flex', justifyContent: 'center' }}>{minebtns}</div>\n            </div>\n        )\n    }\n}\n\nexport default GameBoard;"],"sourceRoot":""}