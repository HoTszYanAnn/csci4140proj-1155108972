{"version":3,"sources":["Lobby/waitingOpponent.svg","Lobby/OnlineLogin.js","Lobby/OnlineRoom.js","Lobby/OnlineExit.js","Lobby/OnlineLobby/index.js","OnlinePage/index.js","MineSweeper/Minesweeper.js","AI/MCTS.js","MineSweeper/GameBoard.js"],"names":["module","exports","UsernameField","withStyles","root","transform","color","borderColor","fontSize","TextField","LargeIconButton","IconButton","ExitIconButton","OnlineLogin","props","handlePlayerNameChange","value","target","setState","changingPlayerName","handleLogin","onLogin","state","getErrorMessage","playersNames","test","length","includes","getError","message","playerName","this","errorMessage","hasError","className","label","error","helperText","margin","variant","inputProps","min","style","textAlign","onKeyPress","key","onChange","disabled","onClick","component","RouterLink","to","Component","findPlayerSeat","players","find","player","name","findFreeSeat","StyledRoom","handleJoinClick","roomId","onJoin","id","handleLeaveClick","onLeave","handlePlayClick","onPlay","handleSpectateClick","onSpectate","type","data","WaitingOpp","marginLeft","OnlineExit","exitButtonLabel","onExit","selectGameName","gameComponents","game","TTTIconButton","selectAllPlayersNames","Array","isArray","gameInstances","forEach","gameInstance","push","OnlineLobby","handleLoginClick","onEnterLobby","findCurrentPlayerGame","filter","some","handleLogoutClick","handleLeaveRoomClick","gameID","onExitLobby","handleCreateRoomClick","onCreateRoom","handleRefreshRoomsClick","onRefreshRooms","handleJoinRoomClick","gameId","playerId","onJoinRoom","onLeaveRoom","numPlayers","onStartGame","playerID","handleExitRoomClick","onExitRoom","componentDidUpdate","prevProps","join","autoJoin","i","create","console","log","exitAndLeaveRoom","justleave","runningGame","setInterval","window","location","reload","errorMsg","phase","OnlineRoom","substring","alreadyJoined","Button","app","credentials","LoadingPage","url","process","OnlineLobbyPage","gameServer","lobbyServer","Game","board","Board","renderer","rooms","handleEnterLobby","handleExitLobby","handleCreateRoom","handleJoinRoom","handleLeaveRoom","handleExitRoom","handleRefreshRooms","handleStartGame","server","x","createArroundMineValueArray","mine","arr","fill","j","Math","floor","random","calculateMinesAround","cells","mineValue","mines","perSweep","hp","cPlayer","currentValue","Minesweeper","setup","randomMine","presetPlayersMine","playersMine","currentMine","boardx","boardy","gameover","moves","sweep","G","ctx","currentPlayer","selectMine","placeMine","changeBoardShowing","a","turn","onEnd","full","winner","end","endIf","_","require","Node","parent","move","depth","mcts","placeActive","wins","visits","children","Infinity","sqrt","performMove","getPossibleMoves","node","cloneDeep","getChildren","y","orginalhp","shuffle","sortBy","nodeSort","last","haveMine","abs","sum","inBoard","MCTS","aiMine","orginalMineArray","orginalCells","getUCB1","winnerarr","rounds","ai","time","rootNode","val","minable","undefined","randomWrongFlag","randomizeBoardAIMine","randomizeBoard","fillMinable","minableRandomID","nullArray","k","m","item","minusCellValue","currentNode","d","Date","start","getTime","randomizeMine","isEmpty","nextMove","getWinner","count0","count1","GameBoard","AImove","selectMove","events","endTurn","isActive","isMyTurn","sweepActive","selectActive","isAITurn","bothai","isSelected","isCurrentValue","changeable","aiFirstMove","setTimeout","boardStyle","minebtns","display","flexDirection","paddingRight","alignSelf","mineBtnClass","idClass","valueShow","marginBottom","gameMetadata","text-align","justifyContent"],"mappings":"2IAAAA,EAAOC,QAAU,IAA0B,6C,wNCUrCC,EAAgBC,YAAW,CAC/BC,KAAM,CACJ,4BAA6B,CAC3BC,UAAW,iCACXC,MAAO,UACP,eAAgB,CACdA,MAAO,QAGX,0BAA2B,CACzBD,UAAW,oCACX,iBAAkB,CAChBC,MAAO,WAET,eAAgB,CACdA,MAAO,QAGX,kCAAmC,CACjCA,MAAO,UACP,eAAgB,CACdA,MAAO,QAGX,2BAA4B,CAC1B,aAAc,CACZC,YAAa,UACb,SAAU,CACR,WAAY,CACVD,MAAO,WAIb,mBAAoB,CAClBC,YAAa,WAEf,yBAA0B,CACxBA,YAAa,WAEf,uBAAwB,CACtBA,YAAa,OAGfD,MAAO,QACPE,SAAU,UA5CML,CA+CnBM,KAEGC,EAAkBP,YAAW,CACjCC,KAAM,CACJ,QAAS,CACPI,SAAU,GACVF,MAAO,WAET,cAAe,CACbE,SAAU,GACVF,MAAO,aARWH,CAWrBQ,KACGC,EAAiBT,YAAW,CAChCC,KAAM,CACJ,QAAS,CACPI,SAAU,GACVF,MAAO,WAET,cAAe,CACbE,SAAU,GACVF,MAAO,aARUH,CAWpBQ,KA4EYE,E,kDAzEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAMRC,uBAAyB,YAA4B,IAAfC,EAAc,EAAxBC,OAAUD,MACpC,EAAKE,SAAS,CAAEC,mBAAoBH,KARnB,EAWnBI,YAAc,WAEZ,EAAKN,MAAMO,QAAQ,EAAKC,MAAMH,qBAbb,EAgBnBI,gBAAkB,SAACJ,EAAoBK,GACrC,OAAKL,EAGA,QAAQM,KAAKN,GAGdA,EAAmBO,OAAS,GACvB,6BAGLF,EAAaG,SAASR,GACjB,yBAEF,IATE,2BAHA,+BAlBQ,EAiCnBS,SAAW,SAACC,GACV,MAAgB,MAAZA,GAhCJ,EAAKP,MAAQ,CACXH,mBAAoBL,EAAMgB,YAHX,E,qDAsCT,IAAD,OACCX,EAAuBY,KAAKT,MAA5BH,mBACAK,EAAiBO,KAAKjB,MAAtBU,aAEFQ,EAAeD,KAAKR,gBAAgBJ,EAAoBK,GACxDS,EAAWF,KAAKH,SAASI,GAE/B,OACE,yBAAKE,UAAU,UACb,yBAAKA,UAAU,SAAf,sBACA,yBAAKA,UAAU,YAAf,iBACA,yBAAKA,UAAU,cACb,6BACE,kBAAChC,EAAD,CAAeiC,MAAM,kBAAkBC,MAAOH,EAAUI,WAAYL,EAAcM,OAAO,SACvFtB,MAAOG,EACPoB,QAAQ,WACRC,WAAY,CAAEC,IAAK,EAAGC,MAAO,CAAEC,UAAW,WAC1CC,WAAY,gBAAGC,EAAH,EAAGA,IAAH,OACTZ,GAAoB,UAARY,GAAmB,EAAKzB,eAEvC0B,SAAUf,KAAKhB,0BAGnB,6BACE,kBAACL,EAAD,CAAiBqC,SAAUd,EAAUe,QAASjB,KAAKX,aAAnD,IAAkE,kBAAC,IAAD,QAEpE,6BACE,kBAACR,EAAD,CAAgBmC,SAAUd,EAAUgB,UAAWC,IAAYC,GAAG,KAA9D,IAAmE,kBAAC,IAAD,c,GAlErDC,a,6CC9EpB1C,EAAkBP,YAAW,CACjCC,KAAK,CACH,QAAS,CACPI,SAAU,GACVF,MAAO,WAET,cAAe,CACbE,SAAU,GACVF,MAAO,aARWH,CAWrBQ,KACGC,EAAiBT,YAAW,CAChCC,KAAK,CACH,QAAS,CACPI,SAAU,GACVF,MAAO,WAET,cAAe,CACbE,SAAU,GACVF,MAAO,aARUH,CAWpBQ,KACG0C,EAAiB,SAACC,EAASxB,GAAV,OACrBwB,EAAQC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,OAAS3B,MACnC4B,EAAe,SAAAJ,GAAO,OAAIA,EAAQC,MAAK,SAAAC,GAAM,OAAKA,EAAOC,SA+DhDE,E,4MA5DbC,gBAAkB,WAAO,IAAD,EACM,EAAK9C,MAAzB+C,EADc,EACdA,OAAQP,EADM,EACNA,QAChB,EAAKxC,MAAMgD,OAAOD,EAAQH,EAAaJ,GAASS,K,EAGlDC,iBAAmB,WACjB,EAAKlD,MAAMmD,QAAQ,EAAKnD,MAAM+C,S,EAGhCK,gBAAkB,WAAO,IAAD,EACkB,EAAKpD,MAArC+C,EADc,EACdA,OAAQP,EADM,EACNA,QAASxB,EADH,EACGA,WACzB,EAAKhB,MAAMqD,OACTN,EADF,UAEKR,EAAeC,EAASxB,GAAYiC,IACvCT,EAAQ5B,S,EAIZ0C,oBAAsB,WAAO,IAAD,EACE,EAAKtD,MAAzB+C,EADkB,EAClBA,OAAQP,EADU,EACVA,QAChB,EAAKxC,MAAMuD,WAAWR,EAAQP,EAAQ5B,S,uDAG9B,IAAD,EAC+BK,KAAKjB,MAA7BgB,GADP,EACC2B,KADD,EACO3B,YAAYwB,EADnB,EACmBA,QACPD,EAAeC,EAASxB,GAE3C,OADiB4B,EAAaJ,GAG1B,yBAAKpB,UAAU,oBACb,4BAAQoC,KAAK,gBAAgBC,KAAMC,MACjC,kBAAC,EAAD,CAAiBxB,QAASjB,KAAKiC,kBAC7B,kBAAC,IAAD,QAON,yBAAK9B,UAAU,UACb,yBAAKA,UAAU,SAAf,sBACA,yBAAKA,UAAU,cACb,yBAAKA,UAAU,YAAYoB,EAAQ,GAAGG,KAAtC,IAA4C,0BAAMf,MAAO,CAACpC,MAAM,YAApB,MAA5C,IAAuFgD,EAAQ,GAAGG,MAClG,yBAAKf,MAAO,CAAC+B,WAAY,SACzB,kBAAC,EAAD,CAAiBlC,QAAQ,WAAWS,QAASjB,KAAKmC,iBAChD,kBAAC,IAAD,QAGF,6BACA,kBAAC,EAAD,CAAgB3B,QAAQ,WAAWS,QAASjB,KAAKiC,kBAC/C,kBAAC,IAAD,c,GAnDWZ,aC7BnB1C,EAAkBP,YAAW,CACjCC,KAAK,CACH,QAAS,CACPI,SAAU,GACVF,MAAO,WAET,cAAe,CACbE,SAAU,GACVF,MAAO,aARWH,CAWrBQ,KAgBY+D,EAdI,SAAC,GAAD,EAAGC,gBAAH,IAAoB7C,EAApB,EAAoBA,WAAY8C,EAAhC,EAAgCA,OAAhC,OACjB,6BACE,yBAAK1C,UAAU,SAAf,sBACA,yBAAKA,UAAU,aACf,yBAAKA,UAAU,YAAf,YAAqCJ,GACnC,6BACI,kBAAC,EAAD,CAAiBkB,QAAS4B,GACxB,kBAAC,IAAD,W,kBCZNC,G,OAAiB,SAAA/D,GAAK,OAAIA,EAAMgE,eAAe,GAAGC,KAAKtB,OAEvD/C,EAAkBP,YAAW,CACjCC,KAAM,CACJ,QAAS,CACPI,SAAU,GACVF,MAAO,WAET,cAAe,CACbE,SAAU,GACVF,MAAO,aARWH,CAWrBQ,KACGqE,EAAgBtE,EAChBuE,EAAwB,SAAAnE,GAC5B,IAAMU,EAAe,GACrB,OAAK0D,MAAMC,QAAQrE,EAAMsE,gBAIzBtE,EAAMsE,cAAcC,SAAQ,SAAAC,GAC1BA,EAAahC,QAAQ+B,SAAQ,SAAA7B,GACvBA,EAAOC,MACTjC,EAAa+D,KAAK/B,EAAOC,YAKxBjC,GAXEA,GAmNIgE,E,kDApMb,WAAY1E,GAAQ,IAAD,8BACjB,cAAMA,IAaR2E,iBAAmB,SAAAhC,GACjB,EAAK3C,MAAM4E,aAAajC,IAfP,EAkBnBkC,sBAAwB,WAAO,IAAD,EACU,EAAK7E,MAAnCsE,EADoB,EACpBA,cAAetD,EADK,EACLA,WACvB,OAAOsD,EAAcQ,QAAO,SAAAN,GAAY,OACtCA,EAAahC,QAAQuC,MAAK,SAAArC,GAAM,OAAIA,EAAOC,OAAS3B,SArBrC,EA2BnBgE,kBAAoB,WACS,EAAKH,wBACbN,SAAQ,SAAAN,GAAI,OAAI,EAAKgB,qBAAqBhB,EAAKiB,WAClE,EAAKlF,MAAMmF,eA9BM,EAiCnBC,sBAAwB,WACtB,EAAKpF,MAAMqF,aAAatB,EAAe,EAAK/D,OAAQ,IAlCnC,EAqCnBsF,wBAA0B,WACxB,EAAKtF,MAAMuF,kBAtCM,EAyCnBC,oBAAsB,SAACC,EAAQC,GAC7B,EAAK1F,MAAM2F,WAAW5B,EAAe,EAAK/D,OAAQyF,EAAQC,IA1CzC,EA6CnBT,qBAAuB,SAAAQ,GACrB,EAAKzF,MAAM4F,YAAY7B,EAAe,EAAK/D,OAAQyF,IA9ClC,EAiDnBrC,gBAAkB,SAACqC,EAAQC,EAAUG,GACnC,EAAK7F,MAAM8F,YAAY/B,EAAe,EAAK/D,OAAQ,CACjDkF,OAAQO,EACRM,SAAUL,EACVG,gBArDe,EAyDnBvC,oBAAsB,SAACmC,EAAQI,GAC7B,EAAK7F,MAAM8F,YAAY/B,EAAe,EAAK/D,OAAQ,CACjDkF,OAAQO,EACRI,gBA5De,EAgEnBG,oBAAsB,WACpB,EAAKhG,MAAMiG,cAjEM,EAoEnBC,mBAAqB,SAACC,GAChBA,EAAU7B,gBAAkB,EAAKtE,MAAMsE,eAAiB,EAAK9D,MAAM4F,OACrE,EAAKC,WACL,EAAK7F,MAAM4F,KAAO,IAvEH,EA2EnBxD,aAAe,SAAAJ,GAAO,OAAIA,EAAQC,MAAK,SAAAC,GAAM,OAAKA,EAAOC,SA3EtC,EA6EnB0D,SAAW,WAGT,IAFA,IAAIC,EAAI,EACJC,EAAS,EACN,EAAKvG,MAAMsE,cAAcgC,IAAI,CAElC,GADAE,QAAQC,IAAI,EAAKzG,MAAMsE,cAAcgC,GAAG9D,SACpC,EAAKI,aAAa,EAAK5C,MAAMsE,cAAcgC,GAAG9D,SAKhD,OAJA+D,EAAS,EACTC,QAAQC,IAAI,EAAK7D,aAAa,EAAK5C,MAAMsE,cAAcgC,GAAG9D,SAASS,IACnEuD,QAAQC,IAAI,EAAKzG,MAAMsE,cAAcgC,GAAGpB,aACxC,EAAKM,oBAAoB,EAAKxF,MAAMsE,cAAcgC,GAAGpB,OAAQ,EAAKtC,aAAa,EAAK5C,MAAMsE,cAAcgC,GAAG9D,SAASS,IAGtHqD,IAEEC,IACF,EAAKnB,wBACL,EAAK5E,MAAM4F,KAAO,IA7FH,EAiGnBM,iBAAmB,WACjB,EAAKlG,MAAMmG,UAAY,EACvB,EAAKX,sBACL,EAAKf,qBAAqB,EAAKjF,MAAM4G,YAAY1B,SAlGjD,EAAK1E,MAAQ,CAAE4F,KAAM,EACnBO,UAAW,GAHI,E,gEAQjBE,YAAY5F,KAAKqE,wBAAyB,MACrCrE,KAAKjB,MAAMsE,cAAc,IAC5BrD,KAAKmE,0B,+BAeL0B,OAAOC,SAASC,W,+BA8EV,IAAD,EAOH/F,KAAKjB,MALPiH,EAFK,EAELA,SACAC,EAHK,EAGLA,MACAlG,EAJK,EAILA,WACAsD,EALK,EAKLA,cACAsC,EANK,EAMLA,YAGF,OAAIK,EAEA,uCACUA,EACR,kBAAC,EAAD,CAAiB/E,QAASjB,KAAK+F,QAA/B,IAAwC,kBAAC,IAAD,SAI9CR,QAAQC,IAAIxF,KAAKjB,OACjBwG,QAAQC,IAAIS,GACE,UAAVA,EAGA,kBAAC,EAAD,CACElG,WAAYA,EACZN,aAAcyD,EAAsBlD,KAAKjB,OACzCO,QAASU,KAAK0D,oBAIpB6B,QAAQC,IAAInC,GACZkC,QAAQC,IAAIxF,KAAK4D,wBAAwB,IAI3B,SAAVqC,GAAoB5C,EAAc,GAChCrD,KAAK4D,wBAAwB,KAAQ5D,KAAKT,MAAMmG,UAEhD,kBAACQ,EAAD,CACEpF,IAAKd,KAAK4D,wBAAwB,GAAGK,OACrCvC,KAAI,sBAAiB1B,KAAK4D,wBAAwB,GAAGK,OAAOkC,UAAU,EAAG,IACzErE,OAAQ9B,KAAK4D,wBAAwB,GAAGK,OACxC1C,QAASvB,KAAK4D,wBAAwB,GAAGrC,QACzCxB,WAAYA,EACZqG,cAAelD,EAAsBlD,KAAKjB,OAAOa,SAC/CG,GAEFgC,OAAQ/B,KAAKuE,oBACbrC,QAASlC,KAAKgE,qBACd5B,OAAQpC,KAAKmC,gBACbG,WAAYtC,KAAKqC,uBAIrBrC,KAAKT,MAAMmG,UAAY,EAErB,yBAAKvF,UAAU,UACb,kBAAC,EAAD,CACEyC,gBAAgB,SAChB7C,WAAYA,EACZ8C,OAAQ7C,KAAK+D,oBAEf,yBAAK5D,UAAU,UAAS,kBAACkG,EAAA,EAAD,CAAQlG,UAAU,SAASc,QAASjB,KAAKoF,UAAzC,oBAKlB,SAAVa,EAEA,yBAAK9F,UAAU,UACb,yBAAKA,UAAU,aACf,yBAAKA,UAAU,gBAAf,sBACI,kBAAC8C,EAAD,CAAehC,QAASjB,KAAKyF,kBAC3B,kBAAC,IAAD,QAGLE,GACC,kBAACA,EAAYW,IAAb,CACErC,OAAQ0B,EAAY1B,OACpBa,SAAUa,EAAYb,SACtByB,YAAaZ,EAAYY,eAOjC,6BACE,kBAACC,EAAA,EAAD,a,GA/LkBnF,a,QCnCpBoF,EAAMC,uDAiDGC,UAhDS,kBACtB,kBAAC,IAAD,CACEC,WAAYH,EACZI,YAAaJ,EACb1D,eAAgB,CACd,CACEC,KAAM8D,IACNC,MAAOC,MAGXC,SAAU,gBACRjB,EADQ,EACRA,SACAa,EAFQ,EAERA,YACA9D,EAHQ,EAGRA,eACAmE,EAJQ,EAIRA,MACAjB,EALQ,EAKRA,MACAlG,EANQ,EAMRA,WACA4F,EAPQ,EAORA,YACAwB,EARQ,EAQRA,iBACAC,EATQ,EASRA,gBACAC,EAVQ,EAURA,iBACAC,EAXQ,EAWRA,eACAC,EAZQ,EAYRA,gBACAC,EAbQ,EAaRA,eACAC,EAdQ,EAcRA,mBACAC,EAfQ,EAeRA,gBAfQ,OAiBR,kBAAC,EAAD,CACEC,OAAQd,EACRb,SAAUA,EACVjD,eAAgBA,EAChBM,cAAe6D,EACfjB,MAAOA,EACPlG,WAAYA,EACZ4F,YAAaA,EACbhC,aAAcwD,EACdjD,YAAakD,EACbhD,aAAciD,EACd3C,WAAY4C,EACZ3C,YAAa4C,EACbvC,WAAYwC,EACZlD,eAAgBmD,EAChB5C,YAAa6C,S,qDCrDfE,EAAI,GAQJC,EAA8B,SAACC,GAEjC,IADA,IAAMC,EAAM5E,MAAMyE,KAAOI,KAAK,MACrB3C,EAAI,EAAGA,EAAIyC,EAAKnI,OAAQ0F,IAC7B,IAAK,IAAI4C,EAAI,EAAGA,EAAIH,EAAKzC,GAAI4C,IAAK,CAC9B,IAAIjG,EAAK,EACT,GACIA,EAAKkG,KAAKC,MAAMD,KAAKE,SAAWR,EAbtC,SAcsB,MAAXG,EAAI/F,IACb+F,EAAI/F,GAAMqD,EAAI,EAGtB,OAAO0C,GAGLM,EAAuB,SAACC,EAAOC,EAAWvG,GAC5C,IAAIwG,EAAQ,EAyBZ,OAxBID,EAAUvG,EAAK,IAAMuG,EAAUvG,EAAK,GAAK,GAAMA,EAAK4F,GAAK,IACzDY,GAAgBD,EAAUvG,EAAK,IAE/BuG,EAAUvG,EAAK,IAAMuG,EAAUvG,EAAK,GAAK,GAAMA,EAAK4F,GAAKA,KACzDY,GAAgBD,EAAUvG,EAAK,IAE/BuG,EAAUvG,EAAK4F,EAAI,IAAMW,EAAUvG,EAAK4F,EAAI,GAAK,GAAM5F,EAAK4F,GAAK,IACjEY,GAAgBD,EAAUvG,EAAK4F,EAAI,IAEnCW,EAAUvG,EAAK4F,IAAMW,EAAUvG,EAAK4F,GAAK,IACzCY,GAAgBD,EAAUvG,EAAK4F,IAE/BW,EAAUvG,EAAK4F,EAAI,IAAMW,EAAUvG,EAAK4F,EAAI,GAAK,GAAM5F,EAAK4F,GAAKA,KACjEY,GAAgBD,EAAUvG,EAAK4F,EAAI,IAEnCW,EAAUvG,EAAK4F,EAAI,IAAMW,EAAUvG,EAAK4F,EAAI,GAAK,GAAM5F,EAAK4F,GAAK,IACjEY,GAAgBD,EAAUvG,EAAK4F,EAAI,IAEnCW,EAAUvG,EAAK4F,IAAMW,EAAUvG,EAAK4F,GAAK,IACzCY,GAAgBD,EAAUvG,EAAK4F,IAE/BW,EAAUvG,EAAK4F,EAAI,IAAMW,EAAUvG,EAAK4F,EAAI,GAAK,GAAM5F,EAAK4F,GAAKA,KACjEY,GAAgBD,EAAUvG,EAAK4F,EAAI,IAEhCY,GAELC,EAAW,SAACF,EAAWvG,EAAIsG,EAAOI,EAAIC,EAASC,GAC7CN,EAAMtG,IAAoB,GAAbsG,EAAMtG,KAEZuG,EAAUvG,GAAM,GACvBsG,EAAMtG,GAAMqG,EAAqBC,EAAOC,EAAWvG,GACnDuD,QAAQC,IAAI,QAAe8C,EAAMtG,GAAM,IAAMuG,EAAUvG,IACvD0G,EAAGC,GAAWD,EAAGC,GAAWJ,EAAUvG,GAClC0G,EAAGC,GAAW,IACdD,EAAGC,GAAW,GAElBC,EAAa5G,GAAM,GAEnBsG,EAAMtG,GAAMqG,EAAqBC,EAAOC,EAAWvG,KA0BrD6G,EAAc,CAChBnH,KAAM,cACNoH,MAAO,iBAAO,CACVR,MAvFQnF,MAAMyE,KAAOI,KAAK,MAwF1BO,UAAWV,EAA4B,CAAC,EAAG,EAAG,IAC9CkB,WAAY,CAAC,EAAG,EAAG,GACnBC,kBAAmB,CAAC,EAAG,EAAG,EAAG,EAAG,GAChCC,YAAa,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACzCL,aAAczF,MAAMyE,KAAOI,KAAK,MAChCkB,YAAa,KACbtE,WAAY,EACZ8D,GAAIvF,MAAM,GAAG6E,KAAK,IAClBmB,OAAQvB,EACRwB,OApGE,EAqGFC,SAAU,OAEdC,MAAO,CACHC,MADG,SACGC,EAAGC,EAAKzH,GACV,IAAIsG,EAAK,YAAOkB,EAAElB,OACdC,EAAS,YAAOiB,EAAEjB,WAClBK,EAAY,YAAOY,EAAEZ,cACrBD,EAAUc,EAAIC,cACdhB,EAAE,YAAOc,EAAEd,IAef,OAdAE,EAAa5G,GAAM,EACnByG,EAASF,EAAWvG,EAAIsG,EAAOI,EAAIC,EAASC,GACxC5G,EAAK4F,GAAKA,IACVa,EAASF,EAAWvG,EAAK,EAAGsG,EAAOI,EAAIC,EAASC,GAIhD5G,EAAK4F,GAAK,GACVa,EAASF,EAAWvG,EAAK,EAAGsG,EAAOI,EAAIC,EAASC,GAIpDH,EAASF,EAAWvG,EAAK4F,EAAGU,EAAOI,EAAIC,EAASC,GAChDH,EAASF,EAAWvG,EAAK4F,EAAGU,EAAOI,EAAIC,EAASC,GACzC,eAAKY,EAAZ,CAAelB,QAAOC,YAAWG,KAAIE,kBAEzCe,WAvBG,SAuBQH,EAAGC,EAAKxK,GACf,IAAIiK,EAAcM,EAAEN,YAOpB,OANA3D,QAAQC,IAAI,UAER0D,EADAA,GAAejK,EACD,KAEAA,EAEX,eAAKuK,EAAZ,CAAeN,iBAGnBU,UAlCG,SAkCOJ,EAAGC,EAAKzH,EAAI/C,GAClB,IAAIsJ,EAAS,YAAOiB,EAAEjB,WAClBI,EAAUc,EAAIC,cACdT,EAAW,YAAOO,EAAEP,aACpBC,EAAcjK,GAASuK,EAAEN,YAI7B,OAHAX,EAAUvG,GAAMuG,EAAUvG,GAAMkH,EAChCD,EAAsB,EAAVN,EAAcO,EAAc,KACxCA,EAAc,KACP,eAAKM,EAAZ,CAAejB,YAAWW,cAAaD,iBAE3CY,mBA5CG,SA4CgBL,EAAGC,EAAKzH,GACvB,IAAI4G,EAAY,YAAOY,EAAEZ,cACrBkB,EAAIlB,EAAa5G,GAGrB,OAFA8H,GAAQ,EACRlB,EAAa5G,GAAM8H,EACZ,eAAKN,EAAZ,CAAeZ,mBAGvBmB,KAAM,CACFC,MAAO,SAACR,EAAGC,GAEP,GADAD,EAAEH,SA7FF,SAACX,EAAIJ,GAEb,IADA,IAAI2B,GAAO,EACF5E,EAAI,EAAGA,EAAIuC,IAAOvC,IACvB,GAAgB,MAAZiD,EAAMjD,GAAY,CAClB4E,GAAO,EACP,MAGR,OAAIvB,EAAG,IAAM,EACF,CAAEwB,OAAQ,GACZxB,EAAG,IAAM,EACP,CAAEwB,OAAQ,KACZD,IACDvB,EAAG,GAAKA,EAAG,GACJ,CAAEwB,OAAQ,GACZxB,EAAG,GAAKA,EAAG,GACT,CAAEwB,OAAQ,GAEV,CAAEA,OAAQ,IA2EJC,CAAIX,EAAEd,GAAIc,EAAElB,OACrBkB,EAAEH,SACF,IAAK,IAAIhE,EAAI,EAAGA,EAAIuC,IAAOvC,IACvBmE,EAAElB,MAAMjD,GAAKgD,EAAqBmB,EAAElB,MAAOkB,EAAEjB,UAAWlD,GACxDmE,EAAEZ,aAAavD,GAAK,EAChBmE,EAAEjB,UAAUlD,KACZmE,EAAEZ,aAAavD,GAAK,KAKxC+E,MAAO,SAACZ,EAAGC,MAIAZ,O,qGC7KXwB,EAAIC,EAAQ,KAEVC,E,WACJ,WAAYvH,EAAMwH,EAAQC,EAAMC,EAAOC,GAAO,IAAD,gCAsJ7CC,YAAc,SAAC5I,GACb,OAAI,EAAKgB,KAAKwG,EAAElB,MAAMtG,IAAgC,GAAzB,EAAKgB,KAAKwG,EAAElB,MAAMtG,OAC1C,EAAKgB,KAAKwG,EAAElB,MAAMtG,EAAK,IAAmC,GAA7B,EAAKgB,KAAKwG,EAAElB,MAAMtG,EAAK,IAAaA,EAAK,EAAKgB,KAAKwG,EAAEL,QAAU,OAC5F,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,IAAmC,GAA7B,EAAKgB,KAAKwG,EAAElB,MAAMtG,EAAK,IAAaA,EAAK,EAAKgB,KAAKwG,EAAEL,QAAU,EAAKnG,KAAKwG,EAAEL,OAAS,OACjH,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,OAAS,IAAwD,GAAlD,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,OAAS,IAAanH,EAAK,EAAKgB,KAAKwG,EAAEL,QAAU,MACvI,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,SAAyD,GAA9C,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,YAChF,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,OAAS,IAAwD,GAAlD,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,OAAS,IAAanH,EAAK,EAAKgB,KAAKwG,EAAEL,QAAU,EAAKnG,KAAKwG,EAAEL,OAAS,OAC3J,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,OAAS,IAAwD,GAAlD,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,OAAS,IAAanH,EAAK,EAAKgB,KAAKwG,EAAEL,QAAU,MACvI,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,SAAyD,GAA9C,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,WAChF,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,OAAS,IAAwD,GAAlD,EAAKnG,KAAKwG,EAAElB,MAAMtG,EAAK,EAAKgB,KAAKwG,EAAEL,OAAS,IAAanH,EAAK,EAAKgB,KAAKwG,EAAEL,QAAU,EAAKnG,KAAKwG,EAAEL,OAAS,WA9JhKnJ,KAAKgD,KAAOA,EACZhD,KAAK2K,KAAOA,EACZ3K,KAAKwK,OAASA,EACdxK,KAAKyK,KAAOA,EACZzK,KAAK6K,KAAO,GACZ7K,KAAK8K,OAAS,EACd9K,KAAK+K,SAAW,KAChB/K,KAAK0K,MAAQA,GAAS,E,oDAGhBjJ,GAGN,OAAmB,GAAfzB,KAAK8K,OAAoBE,IACxBhL,KAAKwK,QAGOxK,KAAK6K,KAAKpJ,IAAW,GAAKzB,KAAK8K,OACzB5C,KAAK+C,KAAK,EAAI/C,KAAK1C,IAAIxF,KAAKwK,OAAOM,QAAU9K,KAAK8K,QAHhE,I,oCAOT,GAAsB,OAAlB9K,KAAK+K,SAAmB,CACR,OAAd/K,KAAKyK,MACPzK,KAAKkL,YAAYlL,KAAKyK,MAQxB,IAAInB,EAAQtJ,KAAKmL,mBACjBnL,KAAK+K,SAAW,GAChB,IAAK,IAAI1F,EAAI,EAAGA,EAAIiE,EAAM3J,OAAQ0F,IAAK,CACrC,IAAI+F,EAAO,IAAIb,EAAKF,EAAEgB,UAAUrL,KAAKgD,MAAOhD,KAAMsJ,EAAMjE,GAAIrF,KAAK0K,MAAQ,EAAG1K,KAAK2K,MACjF3K,KAAK+K,SAASvH,KAAK4H,IAIvB,OAAOpL,KAAK+K,W,kCAKZ/K,KAAKsL,cAIL,IAHA,IAAI1D,EAAI5H,KAAKgD,KAAKwG,EAAEL,OAChBoC,EAAIvL,KAAKgD,KAAKwG,EAAEJ,OAChBa,GAAO,EACF5E,EAAI,EAAGA,EAAIuC,EAAI2D,EAAGlG,IACzB,GAA4B,MAAxBrF,KAAKgD,KAAKwG,EAAElB,MAAMjD,GAAY,CAChC4E,GAAO,EACP,MAyBF,OAAIjK,KAAKgD,KAAKwG,EAAEd,GAAG,IAAM1I,KAAK2K,KAAKa,UAAU,GAAK,GAAKxL,KAAKgD,KAAKwG,EAAEd,GAAG,IAAM,EACnE,EAEA1I,KAAKgD,KAAKwG,EAAEd,GAAG,IAAM1I,KAAK2K,KAAKa,UAAU,GAAK,GAAKxL,KAAKgD,KAAKwG,EAAEd,GAAG,IAAM,EACxE,IAGHuB,IACEjK,KAAKgD,KAAKwG,EAAEd,GAAG,GAAK1I,KAAKgD,KAAKwG,EAAEd,GAAG,GAC9B,CAAEwB,OAAQ,GACVlK,KAAKgD,KAAKwG,EAAEd,GAAG,GAAK1I,KAAKgD,KAAKwG,EAAEd,GAAG,GACnC,CAAEwB,OAAQ,GAEV,CAAEA,OAAQ,M,iCAUzB,OAAOG,EAAErK,KAAKsL,eAAeG,UAAUC,OAAO1L,KAAK2K,KAAKgB,UAAUC,S,yCAIlE,IAAItC,EAAQ,GAMZ,GAAItJ,KAAK6L,WACP,IAAK,IAAIxG,EAAI,EAAGA,EAAmC,EAA/BrF,KAAKgD,KAAKwG,EAAEjB,UAAU5I,OAAY0F,IAChDA,EAAIrF,KAAKgD,KAAKwG,EAAEjB,UAAU5I,OACA,MAAxBK,KAAKgD,KAAKwG,EAAElB,MAAMjD,IACpBiE,EAAM9F,KAAK6B,GAGTrF,KAAK4K,YAAYvF,EAAIrF,KAAKgD,KAAKwG,EAAEjB,UAAU5I,SAC7C2J,EAAM9F,KAAK6B,QAKjB,IAAK,IAAIA,EAAI,EAAGA,EAAIrF,KAAKgD,KAAKwG,EAAEjB,UAAU5I,OAAQ0F,IAC5CA,EAAIrF,KAAKgD,KAAKwG,EAAEjB,UAAU5I,QACA,MAAxBK,KAAKgD,KAAKwG,EAAElB,MAAMjD,IACpBiE,EAAM9F,KAAK6B,GAWnB,OAHAiE,EAAQe,EAAEoB,QAAQnC,K,iCASlB,IAHA,IAAIX,EAAUT,KAAK4D,IAAI9L,KAAK2K,KAAKlJ,OAASzB,KAAK0K,MAAQ,GAEnDqB,EAAM,EACD1G,EAAI,EAAIsD,EAAStD,EAAI,EAAIsD,EAAU,EAAGtD,IAC7C0G,GAAY/L,KAAKgD,KAAKwG,EAAEP,YAAY5D,GAEtC,OAAI0G,EAAM,I,kCAeA/J,GACV,IAAI2G,EAAU,EAAIT,KAAK4D,IAAI9L,KAAK2K,KAAKlJ,OAASzB,KAAK0K,MAAQ,GAE3D,GAAI1I,EAAKhC,KAAKgD,KAAKwG,EAAEjB,UAAU5I,OAAQ,CACrC,IAAIiI,EAAI5H,KAAKgD,KAAKwG,EAAEL,OACpBnJ,KAAKgD,KAAKwG,EAAElB,MAAMtG,GAAMhC,KAAKqI,qBAAqBrG,GAC9ChC,KAAK2K,KAAKqB,QAAQhK,EAAK,IAAOA,EAAK4F,GAAKA,EAAI,GAAmC,MAA7B5H,KAAKgD,KAAKwG,EAAElB,MAAMtG,EAAK,KAAYhC,KAAKgD,KAAKwG,EAAElB,MAAMtG,EAAK,GAAKhC,KAAKqI,qBAAqBrG,EAAK,IAChJhC,KAAK2K,KAAKqB,QAAQhK,EAAK,IAAOA,EAAK4F,GAAK,GAAmC,MAA7B5H,KAAKgD,KAAKwG,EAAElB,MAAMtG,EAAK,KAAYhC,KAAKgD,KAAKwG,EAAElB,MAAMtG,EAAK,GAAKhC,KAAKqI,qBAAqBrG,EAAK,IAC5IhC,KAAK2K,KAAKqB,QAAQhK,EAAK4F,IAAmC,MAA7B5H,KAAKgD,KAAKwG,EAAElB,MAAMtG,EAAK4F,KAAY5H,KAAKgD,KAAKwG,EAAElB,MAAMtG,EAAK4F,GAAK5H,KAAKqI,qBAAqBrG,EAAK4F,IAC3H5H,KAAK2K,KAAKqB,QAAQhK,EAAK4F,IAAmC,MAA7B5H,KAAKgD,KAAKwG,EAAElB,MAAMtG,EAAK4F,KAAY5H,KAAKgD,KAAKwG,EAAElB,MAAMtG,EAAK4F,GAAK5H,KAAKqI,qBAAqBrG,EAAK4F,QAC1H,CACL5F,GAAUhC,KAAKgD,KAAKwG,EAAEjB,UAAU5I,OAChC,IAAI4I,EAAY,EAEhB,GACEA,EAAYL,KAAKC,MAAsB,EAAhBD,KAAKE,gBACrBpI,KAAKgD,KAAKwG,EAAEP,YAAsB,EAAVN,EAAcJ,IAAc,GAC7DvI,KAAKgD,KAAKwG,EAAEjB,UAAUvG,IAAOuG,EAAY,EACzCvI,KAAKgD,KAAKwG,EAAEP,YAAsB,EAAVN,EAAcJ,IAAc,K,2CAInCvG,GACnB,IAAIwG,EAAQ,EACRZ,EAAI5H,KAAKgD,KAAKwG,EAAEL,OA2BpB,OA1BInJ,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK,IAAMhC,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK,GAAK,GAAMA,EAAK4F,GAAK,IACnFY,GAAgBxI,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK,IAEzChC,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK,IAAMhC,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK,GAAK,GAAMA,EAAK4F,GAAKA,EAAI,IACvFY,GAAgBxI,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK,IAEzChC,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,IAAM5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,GAAK,GAAM5F,EAAK4F,GAAK,IAC3FY,GAAgBxI,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,IAE7C5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,IAAM5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,GAAK,IACnEY,GAAgBxI,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,IAEzC5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,IAAM5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,GAAK,GAAM5F,EAAK4F,GAAKA,EAAI,IAC/FY,GAAgBxI,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,IAE7C5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,IAAM5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,GAAK,GAAM5F,EAAK4F,GAAK,IAC3FY,GAAgBxI,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,IAE7C5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,IAAM5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,GAAK,IACnEY,GAAgBxI,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,IAEzC5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,IAAM5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,GAAK,GAAM5F,EAAK4F,GAAKA,EAAI,IAC/FY,GAAgBxI,KAAKgD,KAAKwG,EAAEjB,UAAUvG,EAAK4F,EAAI,IAEf,OAA9B5H,KAAKgD,KAAKwG,EAAEjB,UAAUvG,KACxBhC,KAAKgD,KAAKwG,EAAEd,GAAGR,KAAK4D,IAAI9L,KAAK2K,KAAKlJ,OAASzB,KAAK0K,MAAQ,KAAO1K,KAAKgD,KAAKwG,EAAEjB,UAAUvG,IAChFwG,M,KAgNIyD,E,WA1Mb,WAAYjJ,EAAMkJ,GAAS,oBACzBlM,KAAKkM,OAASA,EACdlM,KAAKgD,KAAOqH,EAAEgB,UAAUrI,GACxBhD,KAAKmM,iBAAmB9B,EAAEgB,UAAUrL,KAAKgD,KAAKwG,EAAEjB,WAChDvI,KAAKoM,aAAe/B,EAAEgB,UAAUrL,KAAKgD,KAAKwG,EAAElB,OAC5CtI,KAAK2L,SAAW,SAAUP,GACxB,OAAIA,EAAKZ,OAAeY,EAAKiB,QAAQ,EAAInE,KAAK4D,IAAIV,EAAKT,KAAKlJ,OAAS2J,EAAKZ,OAAOE,MAAQ,IAClF,GAET1K,KAAKsM,UAAY,GACjBtM,KAAKwL,UAAYnB,EAAEgB,UAAUrL,KAAKgD,KAAKwG,EAAEd,IACzC1I,KAAKuM,OAASvM,KAAKgD,KAAKwJ,GAAGC,MAAQ,GACnClH,QAAQC,IAAIxF,KAAKuM,QACjBvM,KAAKyB,OAASzB,KAAKgD,KAAKyG,IAAIC,eAAiB,EAC7C1J,KAAK0M,SAAW,IAAInC,EAAKvK,KAAKgD,KAAM,KAAM,KAAM,EAAGhD,M,oDAG7CgC,GACN,IAAI4F,EAAI5H,KAAKgD,KAAKwG,EAAEL,OAChBoC,EAAIvL,KAAKgD,KAAKwG,EAAEJ,OACpB,OAAIpH,GAAM,GAAKA,EAAK4F,EAAI2D,I,kCAIdvJ,EAAI2K,EAAKC,GACnB,IAAIhF,EAAI5H,KAAKgD,KAAKwG,EAAEL,OASpB,OARInH,EAAK4F,GAAK,GAAK5H,KAAKgM,QAAQhK,EAAK,EAAI4F,KAAgC,OAAxBgF,EAAQ5K,EAAK,EAAI4F,IAAegF,EAAQ5K,EAAK,EAAI4F,GAAK+E,KAAKC,EAAQ5K,EAAK,EAAI4F,GAAK+E,GAC9H3M,KAAKgM,QAAQhK,EAAK4F,KAA4B,OAApBgF,EAAQ5K,EAAK4F,IAAegF,EAAQ5K,EAAK4F,GAAK+E,KAAKC,EAAQ5K,EAAK4F,GAAK+E,GAC9F3K,EAAK4F,GAAKA,EAAI,GAAM5H,KAAKgM,QAAQhK,EAAK,EAAI4F,KAAgC,OAAxBgF,EAAQ5K,EAAK,EAAI4F,IAAegF,EAAQ5K,EAAK,EAAI4F,GAAK+E,KAAKC,EAAQ5K,EAAK,EAAI4F,GAAK+E,GACpI3K,EAAK4F,GAAK,GAAK5H,KAAKgM,QAAQhK,EAAK,KAA4B,OAApB4K,EAAQ5K,EAAK,IAAe4K,EAAQ5K,EAAK,GAAK2K,KAAKC,EAAQ5K,EAAK,GAAK2K,GAC7G3K,EAAK4F,GAAKA,EAAI,GAAM5H,KAAKgM,QAAQhK,EAAK,KAA4B,OAApB4K,EAAQ5K,EAAK,IAAe4K,EAAQ5K,EAAK,GAAK2K,KAAKC,EAAQ5K,EAAK,GAAK2K,GACpH3K,EAAK4F,GAAK,GAAK5H,KAAKgM,QAAQhK,EAAK,EAAI4F,KAAgC,OAAxBgF,EAAQ5K,EAAK,EAAI4F,IAAegF,EAAQ5K,EAAK,EAAI4F,GAAK+E,KAAKC,EAAQ5K,EAAK,EAAI4F,GAAK+E,GAC9H3M,KAAKgM,QAAQhK,EAAK4F,KAA4B,OAApBgF,EAAQ5K,EAAK4F,IAAegF,EAAQ5K,EAAK4F,GAAK+E,KAAKC,EAAQ5K,EAAK4F,GAAK+E,GAC9F3K,EAAK4F,GAAKA,EAAI,GAAM5H,KAAKgM,QAAQhK,EAAK,EAAI4F,KAAgC,OAAxBgF,EAAQ5K,EAAK,EAAI4F,IAAegF,EAAQ5K,EAAK,EAAI4F,GAAK+E,KAAKC,EAAQ5K,EAAK,EAAI4F,GAAK+E,GACjIC,I,qCAGM5K,EAAI2K,EAAKrE,GACtB,IAAIV,EAAI5H,KAAKgD,KAAKwG,EAAEL,OASpB,OARInH,EAAK4F,GAAK,GAAK5H,KAAKgM,QAAQhK,EAAK,EAAI4F,IAA6B,MAArBU,EAAMtG,EAAK,EAAI4F,KAAYU,EAAMtG,EAAK,EAAI4F,IAAM+E,GAC7F3M,KAAKgM,QAAQhK,EAAK4F,IAAyB,MAAjBU,EAAMtG,EAAK4F,KAAYU,EAAMtG,EAAK4F,IAAM+E,GACjE3K,EAAK4F,GAAKA,EAAI,GAAM5H,KAAKgM,QAAQhK,EAAK,EAAI4F,IAA6B,MAArBU,EAAMtG,EAAK,EAAI4F,KAAYU,EAAMtG,EAAK,EAAI4F,IAAM+E,GACnG3K,EAAK4F,GAAK,GAAK5H,KAAKgM,QAAQhK,EAAK,IAAyB,MAAjBsG,EAAMtG,EAAK,KAAYsG,EAAMtG,EAAK,IAAM2K,GAChF3K,EAAK4F,GAAKA,EAAI,GAAM5H,KAAKgM,QAAQhK,EAAK,IAAyB,MAAjBsG,EAAMtG,EAAK,KAAYsG,EAAMtG,EAAK,IAAM2K,GACvF3K,EAAK4F,GAAK,GAAK5H,KAAKgM,QAAQhK,EAAK,EAAI4F,IAA6B,MAArBU,EAAMtG,EAAK,EAAI4F,KAAYU,EAAMtG,EAAK,EAAI4F,IAAM+E,GAC7F3M,KAAKgM,QAAQhK,EAAK4F,IAAyB,MAAjBU,EAAMtG,EAAK4F,KAAYU,EAAMtG,EAAK4F,IAAM+E,GACjE3K,EAAK4F,GAAKA,EAAI,GAAM5H,KAAKgM,QAAQhK,EAAK,EAAI4F,IAA6B,MAArBU,EAAMtG,EAAK,EAAI4F,KAAYU,EAAMtG,EAAK,EAAI4F,IAAM+E,GAChGrE,I,sCAQP,IALA,IAAIR,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,GACpBF,EAAI5H,KAAKgD,KAAKwG,EAAEL,OAChBoC,EAAIvL,KAAKgD,KAAKwG,EAAEJ,OAGX/D,EAAI,EAAGA,EAAI,EAAGA,SACYwH,GAA7B7M,KAAKgD,KAAKwG,EAAET,WAAW1D,KACzByC,EAAKzC,GAAKrF,KAAKgD,KAAKwG,EAAET,WAAW1D,IAGrC,IAAK,IAAIA,EAAI,EAAGA,EAAI,GAAIA,IAClBA,EAAI,EACNyC,EAAKzC,IAAMrF,KAAKgD,KAAKwG,EAAER,kBAAkB3D,GAAKrF,KAAKgD,KAAKwG,EAAEP,YAAY5D,GAEtEyC,EAAKzC,EAAI,IAAMrF,KAAKgD,KAAKwG,EAAER,kBAAkB3D,EAAI,GAAKrF,KAAKgD,KAAKwG,EAAEP,YAAY5D,GAOlF,IAHA,IAAIyH,GAAkB,EAClBC,EAAuB5J,MAAMyE,EAAI2D,GAAGvD,KAAK,MAEpC3C,EAAI,EAAGA,EAAIrF,KAAKkM,OAAOvM,OAAQ0F,IACtC0H,EAAqB/M,KAAKkM,OAAO7G,GAAG,KAAOrF,KAAKkM,OAAO7G,GAAG,GAC1DyC,EAAK9H,KAAKkM,OAAO7G,GAAG,GAAK,IAAM,EAEjC,IAAI2H,EAAiBD,EAWlBH,EAAUzJ,MAAMyE,EAAI2D,GAAGvD,KAAK,MAC/B,EAAG,CACD8E,GAAkB,EAClB,IAAIxE,EAAQ+B,EAAEgB,UAAUrL,KAAKoM,cAE7BY,EAAiBD,EAEjB,IAAK,IAAI1H,EAAIyC,EAAKnI,OAAS,EAAG0F,GAAK,EAAGA,IAAK,CACzC,IAAK,IAAI4C,EAAI,EAAGA,EAAIH,EAAKzC,GAAI4C,IAAK,CAEhC2E,EAAUzJ,MAAMyE,EAAI2D,GAAGvD,KAAK,MAC5B,IAAK,IAAIhG,EAAK,EAAGA,EAAK4K,EAAQjN,OAAQqC,IAChCsG,EAAMtG,IAAO,GAAkB,MAAbsG,EAAMtG,KAC1B4K,EAAU5M,KAAKiN,YAAYjL,EAAIsG,EAAMtG,GAAK4K,IAM9C,IAHA,IAAIM,EAAkB,GAClBC,EAAY,GAEPnL,EAAK,EAAGA,EAAK4K,EAAQjN,OAAQqC,IACpC,GAAI4K,EAAQ5K,IAAOqD,EAAI,EACrB,IAAK,IAAI+H,EAAI,EAAGA,EAAIR,EAAQ5K,GAAKoL,IAE/B,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACtBH,EAAgB1J,KAAKxB,QAED,MAAf4K,EAAQ5K,IACjBmL,EAAU3J,KAAKxB,GAGnB,GAAwB,GAApBmL,EAAUxN,OACZ,IAAK,IAAIyN,EAAI,EAAGA,EAAI,EAAGA,IACrBF,EAAgB1J,MAAM,GAG1B,GAA8B,GAA1B0J,EAAgBvN,OAAa,CAC/BmN,GAAkB,EAClB,MAGF,IAAIQ,EAAOJ,EAAgBhF,KAAKC,MAAMD,KAAKE,SAAW8E,EAAgBvN,UACzD,GAAT2N,EACFN,EAAeG,EAAUjF,KAAKC,MAAMD,KAAKE,SAAW+E,EAAUxN,WAAa,EAE3EqN,EAAeM,IAASjI,EAAI,EAE9BiD,EAAQtI,KAAKuN,eAAeD,EAAMjI,EAAI,EAAGiD,GAE3C,GAAIwE,EACF,aAYGA,GACT,IAAI,IAAIzH,EAAI,EAAGA,EAAIuC,EAAE2D,EAAGlG,IACJ,MAAduH,EAAQvH,IAAmC,MAArB2H,EAAe3H,IACnC6C,KAAKC,MAAqB,EAAfD,KAAKE,YAClB4E,EAAe3H,GAAK,GAI1BrF,KAAKgD,KAAKwG,EAAEjB,UAAY8B,EAAEgB,UAAU2B,K,mCAMpC,IAAWQ,EACPC,EAAI,IAAIC,KACRC,EAAQF,EAAEG,UACVvI,EAAI,EACR,EAAG,CACDA,GAAK,EAEL,IAAI8E,GADJsD,EAAI,IAAIC,MACIE,UAKZ,IAHAJ,EAAcxN,KAAK0M,SACnB1M,KAAK0M,SAAS5B,QAAU,EACxB9K,KAAK6N,iBACGxD,EAAEyD,QAAQN,EAAYlC,kBAC5BkC,EAAcA,EAAYO,YACdjD,QAAU,EACU,IAA5B0C,EAAYQ,aAAiD,IAA5BR,EAAYQ,eAGnD,IAAI9D,EAASsD,EAAYQ,YAEzB,IADAhO,KAAKsM,UAAU9I,KAAK0G,GACbsD,GACLA,EAAY3C,KAAKX,IAAWsD,EAAY3C,KAAKX,IAAW,GAAK,EAC7DsD,EAAcA,EAAYhD,aAGrBL,EAAMwD,EAAsB,IAAd3N,KAAKuM,QAG5B,IAASlH,EAAI,EAAGA,EAAIrF,KAAKsM,UAAU3M,SAAU0F,EAClB,GAArBrF,KAAKsM,UAAUjH,GACjB4I,EAEAC,EAMJ,OAJA3I,QAAQC,IAAI6E,EAAErK,KAAK0M,SAASpB,eAAeI,OAAO,UAAUE,OAAOf,MACnEtF,QAAQC,IAAI,QAAUH,GACtBE,QAAQC,IAAIxF,KAAK0M,SAAS3B,SAASpL,QACnC4F,QAAQC,IAAI6E,EAAErK,KAAK0M,SAASpB,eAAeI,OAAO,UAAUE,OAAOd,QAC5DT,EAAErK,KAAK0M,SAASpB,eAAeI,OAAO,UAAUE,OAAOnB,S,KCja5D0D,E,kDACF,WAAYpP,GAAO,IAAD,8BACd,cAAMA,IA4BVqP,OAAS,WACL7I,QAAQC,IAAI,UACZ,IACIxD,EADO,IAAIiK,EAAK,EAAKlN,MAAO,EAAKQ,MAAM2M,OAAO,EAAKnN,MAAM0K,IAAIC,gBACnD2E,aACd,GAAIrM,EAAK,EAAKjD,MAAMyK,EAAEjB,UAAU5I,OAC5B4F,QAAQC,IAAI,SAASxD,GACrB,EAAKjD,MAAMuK,MAAMC,MAAMvH,OACpB,CACH,IAAI/C,EAAQ,EACZ,GACIA,EAAQiJ,KAAKC,MAAsB,EAAhBD,KAAKE,gBACkD,GAAtE,EAAKrJ,MAAMyK,EAAEP,YAA2C,EAA/B,EAAKlK,MAAM0K,IAAIC,cAAoBzK,IACpE,EAAKM,MAAM2M,OAAO,EAAKnN,MAAM0K,IAAIC,eAAelG,KAAK,CAACxB,EAAI,EAAKjD,MAAMyK,EAAEL,OAAQ,EAAKpK,MAAMyK,EAAEJ,OAAOnK,EAAM,IACzGsG,QAAQC,IAAI,EAAKjG,MAAM2M,QACvB,EAAKnN,MAAMuK,MAAMM,UAAU5H,EAAI,EAAKjD,MAAMyK,EAAEL,OAAQ,EAAKpK,MAAMyK,EAAEJ,OAAQnK,EAAQ,GAErF,EAAKF,MAAMuP,OAAOC,WA7CJ,EAgDlBtN,QAAU,SAACe,EAAI8H,GACP,EAAK0E,YAAc,EAAKC,WACnB,EAAK1P,MAAMyK,EAAEN,YAWV,EAAK0B,YAAY5I,KACjB,EAAKjD,MAAMuK,MAAMM,UAAU5H,GAC3B,EAAKjD,MAAMuP,OAAOC,WAZlB,EAAKG,YAAY1M,IACjB,EAAKjD,MAAMuK,MAAMC,MAAMvH,GACvB,EAAKjD,MAAMuP,OAAOC,WAEd,EAAKxP,MAAMyK,EAAEjB,UAAUvG,IAAiC,GAA1B,EAAKjD,MAAMyK,EAAElB,MAAMtG,IACjD,EAAKjD,MAAMuK,MAAMO,mBAAmB7H,GAUzC,EAAKjD,MAAMyK,EAAEjB,UAAUvG,IAAiC,GAA1B,EAAKjD,MAAMyK,EAAElB,MAAMtG,IACxD,EAAKjD,MAAMuK,MAAMO,mBAAmB7H,IAnE1B,EAuElB2H,WAAa,SAAC1K,GACN,EAAKuP,YAAc,EAAKG,aAAa1P,IACrC,EAAKF,MAAMuK,MAAMK,WAAW1K,IAzElB,EA6ElB2P,SAAW,WACP,QAAI,EAAK7P,MAAM8P,aACOhC,IAAlB,EAAK9N,MAAMyN,IACX,EAAKzN,MAAMyN,GAAGxK,IAAM,EAAKjD,MAAM0K,IAAIC,eAhFzB,EAmFlB+E,SAAW,WACP,OAAI,EAAK1P,MAAM+F,UAAY,EAAK/F,MAAM0K,IAAIC,eApF5B,EAuFlB8E,SAAW,WACP,OAAI,EAAKzP,MAAMyK,EAAEH,UAxFH,EA2FlBqF,YAAc,SAAC1M,GACX,OAAI,EAAKjD,MAAMyK,EAAElB,MAAMtG,IAAiC,GAA1B,EAAKjD,MAAMyK,EAAElB,MAAMtG,IA5FnC,EA+FlB4I,YAAc,SAAC5I,GACX,OAAI,EAAKjD,MAAMyK,EAAElB,MAAMtG,IAAiC,GAA1B,EAAKjD,MAAMyK,EAAElB,MAAMtG,OAC5C,EAAKjD,MAAMyK,EAAElB,MAAMtG,EAAK,IAAoC,GAA9B,EAAKjD,MAAMyK,EAAElB,MAAMtG,EAAK,IAAaA,EAAK,EAAKjD,MAAMyK,EAAEL,QAAU,OAC/F,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,IAAoC,GAA9B,EAAKjD,MAAMyK,EAAElB,MAAMtG,EAAK,IAAaA,EAAK,EAAKjD,MAAMyK,EAAEL,QAAU,EAAKpK,MAAMyK,EAAEL,OAAS,OACrH,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,OAAS,IAA0D,GAApD,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,OAAS,IAAanH,EAAK,EAAKjD,MAAMyK,EAAEL,QAAU,MAC5I,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,SAA2D,GAAhD,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,YACpF,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,OAAS,IAA0D,GAApD,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,OAAS,IAAanH,EAAK,EAAKjD,MAAMyK,EAAEL,QAAU,EAAKpK,MAAMyK,EAAEL,OAAS,OACjK,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,OAAS,IAA0D,GAApD,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,OAAS,IAAanH,EAAK,EAAKjD,MAAMyK,EAAEL,QAAU,MAC5I,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,SAA2D,GAAhD,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,WACpF,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,OAAS,IAA0D,GAApD,EAAKpK,MAAMyK,EAAElB,MAAMtG,EAAK,EAAKjD,MAAMyK,EAAEL,OAAS,IAAanH,EAAK,EAAKjD,MAAMyK,EAAEL,QAAU,EAAKpK,MAAMyK,EAAEL,OAAS,WAxGxJ,EA2GlBwF,aAAe,SAAC1P,GACZ,OAA8E,GAA1E,EAAKF,MAAMyK,EAAEP,YAAYhK,EAAuC,EAA/B,EAAKF,MAAM0K,IAAIC,cAAoB,IA5G1D,EAgHlBoF,WAAa,SAAC7P,GACV,OAAI,EAAKF,MAAMyK,EAAEN,aAAejK,GAjHlB,EAoHlB8P,eAAiB,SAAC9P,GACd,QAAI,EAAKF,MAAMyK,EAAEZ,aAAa3J,IArHhB,EAwHlB+P,WAAa,SAAC/P,GACV,SAAI,EAAKF,MAAMyK,EAAEjB,UAAUtJ,KAAU,EAAKF,MAAMyK,EAAElB,MAAMrJ,IAAuC,GAA7B,EAAKF,MAAMyK,EAAElB,MAAMrJ,KAvHrF,EAAKM,MAAQ,CACT2M,OAAO,CAAC,GAAG,IACX+C,aAAY,GAJF,E,8DAOA/J,GAAW,IAAD,YACD2H,IAAlB7M,KAAKjB,MAAMyN,KAAmBxM,KAAKjB,MAAM8P,QAAkC,GAAvB7O,KAAKjB,MAAM0K,IAAIM,MAAc/J,KAAKjB,MAAMkQ,aACzFjP,KAAK4O,aACL5O,KAAKb,SAAS,CAAC8P,aAAc,IAC7B1J,QAAQC,IAAIxF,KAAKjB,MAAM0K,IAAIC,eAC3BwF,YAAW,WACP,EAAKd,WACN,Q,yCAIIlJ,GAAW,IAAD,YACF2H,IAAlB7M,KAAKjB,MAAMyN,KAAoBxM,KAAKjB,MAAM8P,QAAW3J,EAAUuE,IAAIC,eAAiB1J,KAAKjB,MAAM0K,IAAIC,eAAkB1J,KAAKjB,MAAMyK,EAAEH,UAC/HrJ,KAAK4O,aACLrJ,QAAQC,IAAIxF,KAAKjB,MAAM0K,IAAIC,eAC3BwF,YAAW,WACP,EAAKd,WACN,Q,+BAoGL,IAAD,OACDlE,EAAS,GACTiF,EAAa,6CACbnP,KAAKjB,MAAMyK,EAAEN,aAAelJ,KAAKjB,MAAM0K,IAAIC,eAAiB1J,KAAKjB,MAAM+F,WACvEqK,GAA0B,0BAE1BnP,KAAKjB,MAAMyK,EAAEH,WACba,EAASlK,KAAKjB,MAAMyK,EAAEH,SAASa,QAEnC,IAAIkF,EAAW,GACXrI,EAAQ,GACR/G,KAAKjB,MAAM8P,OACXO,EAAS5L,KACL,yBAAK1C,IAAI,UAAUH,MAAO,CAAE0O,QAAS,OAAQC,cAAe,SAAUC,aAAc,SAChF,yBAAK5O,MAAO,CAAE6O,UAAW,aAAzB,SACA,yBAAK7O,MAAO,CAAE6O,UAAW,aAAzB,SACA,yBAAK7O,MAAO,CAAE6O,UAAW,aAAzB,WAIZJ,EAAS5L,KACL,yBAAK1C,IAAI,UAAUH,MAAO,CAAE0O,QAAS,OAAQC,cAAe,SAAUC,aAAc,SAChF,yBAAK5O,MAAO,CAAE6O,UAAW,aAAzB,SACA,yBAAK7O,MAAO,CAAE6O,UAAW,aAAzB,YACA,yBAAK7O,MAAO,CAAE6O,UAAW,aAAzB,gBAKR,IA7BK,eA6BInK,GACL,IAAIoK,EAAe,KAEfA,EADA,EAAKX,WAAWzJ,IAAM,EAAKtG,MAAM0K,IAAIC,eAAiB,EAAK3K,MAAM+F,SAClD,2CACR,EAAK6J,aAAatJ,IAAM,EAAKmJ,SAASnJ,KAAO,EAAKuJ,YAAc,EAAK7P,MAAM0K,IAAIC,eAAiB,EAAK3K,MAAM+F,SACnG,6BAEA,eAEf,EAAK/F,MAAM8P,OACXO,EAAS5L,KACL,yBAAK1C,IAAKuE,EAAGlF,UAAU,QACnB,yBAAKA,UAAWsP,EACZ3O,IAAKuE,EACLpE,QAAS,kBAAM,EAAK0I,WAAWtE,KAC9BA,GAEL,yBAAKlF,UAAU,mBAAmB,EAAKpB,MAAMyK,EAAEP,YAAY5D,EAAI,EAAQ,IACvE,yBAAKlF,UAAU,mBAAmB,EAAKpB,MAAMyK,EAAEP,YAAY5D,EAAI,EAAQ,MAInF+J,EAAS5L,KACL,yBAAK1C,IAAKuE,EAAGlF,UAAU,QACnB,yBAAKA,UAAWsP,EACZ3O,IAAKuE,EACLpE,QAAS,kBAAM,EAAK0I,WAAWtE,KAC9BA,GAEL,yBAAKlF,UAAU,mBAAmB,EAAKpB,MAAMyK,EAAEP,YAAY5D,EAA0B,EAAtB,EAAKtG,MAAM+F,SAAe,IACzF,yBAAK3E,UAAU,mBAAmB,EAAKpB,MAAMyK,EAAEP,YAAY5D,EAA8B,GAAzB,EAAE,EAAKtG,MAAM+F,UAAgB,OA9BhGO,EAAI,EAAGA,EAAI,EAAGA,IAAM,EAApBA,GAoCT,IAAK,IAAIA,EAAI,EAAGA,EAAIrF,KAAKjB,MAAMyK,EAAEJ,OAAQ/D,IAAK,CAE1C,IADA,IAAIiD,EAAQ,GAD8B,WAEjCL,GACL,IAAMjG,EAAKqD,EAAI,EAAKtG,MAAMyK,EAAEL,OAASlB,EACjCyH,EAAU,KACVC,EAAY,KAEZD,EADA,EAAKhB,YAAY1M,IAAO,EAAKwM,SAASxM,GAC5B,kBAEA,OAEV,EAAKgN,WAAWhN,KAChB0N,GAAoB,mBAEpB,EAAKX,eAAe/M,IACpB2N,EAAY,EAAK5Q,MAAMyK,EAAEjB,UAAUvG,GACnC0N,GAAoB,qBAGhBC,EAD0B,GAA1B,EAAK5Q,MAAMyK,EAAElB,MAAMtG,GACP,GAEA,EAAKjD,MAAMyK,EAAElB,MAAMtG,GAEvCsG,EAAM9E,KACF,wBAAIrD,UAAU,gBACVW,IAAKkB,EACLf,QAAS,kBAAM,EAAKA,QAAQe,KAC5B,yBAAK7B,UAAWuP,GAAUC,MAzB7B1H,EAAI,EAAGA,EAAIjI,KAAKjB,MAAMyK,EAAEL,OAAQlB,IAAM,EAAtCA,GA6BTlB,EAAMvD,KAAK,wBAAI1C,IAAKuE,EAAGlF,UAAU,iBAAiBmI,IAGtD,OACI,6BACI,6BACI,yBAAK3H,MAAO,CAACiP,aAAa,UACtB1F,GAAqB,IAAXA,GACV,6BACI,yBAAK/J,UAAU,aACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,aAAaH,KAAKjB,MAAM8Q,aAAa,GAAGnO,MACvD,yBAAKvB,UAAU,aAAf,OAAgCH,KAAKjB,MAAMyK,EAAEd,GAAG,KAEpD,yBAAKvI,UAAU,WAAf,MACA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,aAAaH,KAAKjB,MAAM8Q,aAAa,GAAGnO,MACvD,yBAAKvB,UAAU,aAAf,OAAgCH,KAAKjB,MAAMyK,EAAEd,GAAG,OAGrD1I,KAAKjB,MAAM8P,QAAU,yBAAK1O,UAAU,aAAaH,KAAKjB,MAAM+F,UAAY9E,KAAKjB,MAAM0K,IAAIC,eAAiB,YAAa1J,KAAKjB,MAAM+F,UAAY9E,KAAKjB,MAAM0K,IAAIC,eAAiB,iBAC9K1J,KAAKjB,MAAM8P,QAAU,yBAAK1O,UAAU,aAAaH,KAAKjB,MAAM8Q,aAAa7P,KAAKjB,MAAM0K,IAAIC,eAAehI,KAAlF,YAG5B1B,KAAKjB,MAAM8P,SACG,IAAX3E,GAAgBA,IACjB,yBAAK/J,UAAU,YACV+J,GAAUlK,KAAKjB,MAAM+F,UAAY,2BACjCoF,GAAUlK,KAAKjB,MAAM+F,UAAYoF,GAAU,GAAK,kBAGxDlK,KAAKjB,MAAM8P,SAAsB,IAAX3E,GAAgBA,IACnC,yBAAK/J,UAAU,YACVH,KAAKjB,MAAM8Q,aAAa3F,GAAQxI,KADrC,QAKD1B,KAAK4O,aAAe5O,KAAKjB,MAAMyK,EAAEH,UAAY,kBAAC,oBAAD,CAAoB9K,MAAM,YAC1E,2BAAOyD,GAAG,QAAQ7B,UAAWgP,EAAYxO,MAAO,CAAEJ,OAAQ,WACtD,+BAAQwG,KAGhB,6BACA,yBAAK5G,UAAU,wCAAwC2P,aAAW,SAASnP,MAAO,CAAE0O,QAAS,OAAQU,eAAgB,WAAaX,Q,GAxQ1H/N,aA8QT8M","file":"static/js/8.77f3e84f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/waitingOpponent.d29765f0.svg\";","import React, { Component } from \"react\";\r\nimport {\r\n  withStyles,\r\n} from '@material-ui/core/styles';\r\nimport { Link as RouterLink } from 'react-router-dom';\r\nimport { IconButton } from \"@material-ui/core\";\r\nimport { TiArrowBackOutline } from \"react-icons/ti\"\r\nimport CheckIcon from '@material-ui/icons/Check';\r\nimport { Grid, TextField } from \"@material-ui/core\";\r\n\r\nconst UsernameField = withStyles({\r\n  root: {\r\n    '& .MuiInputLabel-outlined': {\r\n      transform: 'translate(20px, 12px) scale(3)',\r\n      color: '#adadad',\r\n      '&.Mui-error ': {\r\n        color: 'red',\r\n      },\r\n    },\r\n    '& .MuiInputLabel-shrink': {\r\n      transform: 'translate(14px, -12px) scale(1.5)',\r\n      '&.Mui-focused ': {\r\n        color: '#34ffff',\r\n      },\r\n      '&.Mui-error ': {\r\n        color: 'red',\r\n      },\r\n    },\r\n    '&:hover .MuiInputLabel-outlined': {\r\n      color: '#34ffff',\r\n      '&.Mui-error ': {\r\n        color: 'red',\r\n      },\r\n    },\r\n    '& .MuiOutlinedInput-root': {\r\n      '& fieldset': {\r\n        borderColor: '#adadad',\r\n        '& span': {\r\n          '& legend': {\r\n            color: 'white',\r\n          }\r\n        }\r\n      },\r\n      '&:hover fieldset': {\r\n        borderColor: '#34ffff',\r\n      },\r\n      '&.Mui-focused fieldset': {\r\n        borderColor: '#34ffff',\r\n      },\r\n      '&.Mui-error fieldset': {\r\n        borderColor: 'red',\r\n      },\r\n\r\n      color: 'white',\r\n      fontSize: '2rem',\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nconst LargeIconButton = withStyles({\r\n  root: {\r\n    '& svg': {\r\n      fontSize: 75,\r\n      color: '#adadad'\r\n    },\r\n    '&:hover svg': {\r\n      fontSize: 75,\r\n      color: '#34ffff'\r\n    }\r\n  }\r\n})(IconButton);\r\nconst ExitIconButton = withStyles({\r\n  root: {\r\n    '& svg': {\r\n      fontSize: 75,\r\n      color: '#adadad'\r\n    },\r\n    '&:hover svg': {\r\n      fontSize: 75,\r\n      color: '#ff3434'\r\n    }\r\n  }\r\n})(IconButton);\r\n\r\nclass OnlineLogin extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      changingPlayerName: props.playerName\r\n    };\r\n  }\r\n\r\n  handlePlayerNameChange = ({ target: { value } }) => {\r\n    this.setState({ changingPlayerName: value });\r\n  };\r\n\r\n  handleLogin = () => {\r\n    // TODO add user to AUTH server\r\n    this.props.onLogin(this.state.changingPlayerName);\r\n  };\r\n\r\n  getErrorMessage = (changingPlayerName, playersNames) => {\r\n    if (!changingPlayerName) {\r\n      return \"Player name cannot be empty\";\r\n    }\r\n    if (!/^\\w+$/.test(changingPlayerName)) {\r\n      return \"Invalid characters exist\";\r\n    }\r\n    if (changingPlayerName.length > 15) {\r\n      return \"Too Long! Max length is 15\";\r\n    }\r\n    // TODO load players names from AUTH server\r\n    if (playersNames.includes(changingPlayerName)) {\r\n      return \"Player name is existed\";\r\n    }\r\n    return \" \";\r\n  };\r\n\r\n  getError = (message) => {\r\n    if (message === \" \") return false;\r\n    return true;\r\n  }\r\n\r\n  render() {\r\n    const { changingPlayerName } = this.state;\r\n    const { playersNames } = this.props;\r\n\r\n    const errorMessage = this.getErrorMessage(changingPlayerName, playersNames);\r\n    const hasError = this.getError(errorMessage);\r\n\r\n    return (\r\n      <div className=\"center\">\r\n        <div className=\"title\">Minesweeper Battle</div>\r\n        <div className=\"subtitle\">Online Battle</div>\r\n        <div className=\"loginGroup\">\r\n          <div >\r\n            <UsernameField label=\"Enter Your Name\" error={hasError} helperText={errorMessage} margin=\"normal\"\r\n              value={changingPlayerName}\r\n              variant=\"outlined\"\r\n              inputProps={{ min: 0, style: { textAlign: 'center' } }}\r\n              onKeyPress={({ key }) =>\r\n                !hasError && key === \"Enter\" && this.handleLogin()\r\n              }\r\n              onChange={this.handlePlayerNameChange}\r\n            />\r\n          </div>\r\n          <div>\r\n            <LargeIconButton disabled={hasError} onClick={this.handleLogin} > <CheckIcon /></LargeIconButton>\r\n          </div>\r\n          <div>\r\n            <ExitIconButton disabled={hasError} component={RouterLink} to=\"/\"> <TiArrowBackOutline /></ExitIconButton>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OnlineLogin;","import React, { Component } from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport WaitingOpp from \"./waitingOpponent.svg\";\r\nimport { IconButton, withStyles }from \"@material-ui/core\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport { FaGamepad } from \"react-icons/fa\";\r\nconst LargeIconButton = withStyles({\r\n  root:{\r\n    '& svg': {\r\n      fontSize: 50,\r\n      color: '#adadad'\r\n    },\r\n    '&:hover svg': {\r\n      fontSize: 50,\r\n      color: '#34ffff'\r\n    }\r\n  }\r\n})(IconButton);\r\nconst ExitIconButton = withStyles({\r\n  root:{\r\n    '& svg': {\r\n      fontSize: 50,\r\n      color: '#adadad'\r\n    },\r\n    '&:hover svg': {\r\n      fontSize: 50,\r\n      color: '#ff3434'\r\n    }\r\n  }\r\n})(IconButton);\r\nconst findPlayerSeat = (players, playerName) =>\r\n  players.find(player => player.name === playerName);\r\nconst findFreeSeat = players => players.find(player => !player.name);\r\n\r\nclass StyledRoom extends Component {\r\n  handleJoinClick = () => {\r\n    const { roomId, players } = this.props;\r\n    this.props.onJoin(roomId, findFreeSeat(players).id);\r\n  };\r\n\r\n  handleLeaveClick = () => {\r\n    this.props.onLeave(this.props.roomId);\r\n  };\r\n\r\n  handlePlayClick = () => {\r\n    const { roomId, players, playerName } = this.props;\r\n    this.props.onPlay(\r\n      roomId,\r\n      `${findPlayerSeat(players, playerName).id}`,\r\n      players.length\r\n    );\r\n  };\r\n\r\n  handleSpectateClick = () => {\r\n    const { roomId, players } = this.props;\r\n    this.props.onSpectate(roomId, players.length);\r\n  };\r\n\r\n  render() {\r\n    const { name, playerName, players } = this.props;\r\n    const playerSeat = findPlayerSeat(players, playerName);\r\n    const freeSeat = findFreeSeat(players);\r\n    if (freeSeat){\r\n      return (\r\n        <div className=\"center flexGroup\">\r\n          <object type=\"image/svg+xml\" data={WaitingOpp} />\r\n            <LargeIconButton onClick={this.handleLeaveClick}>\r\n              <ExitToAppIcon />\r\n            </LargeIconButton>\r\n        </div>\r\n        \r\n      )\r\n    }else{\r\n      return (\r\n        <div className=\"center\">\r\n          <div className=\"title\">Minesweeper Battle</div>\r\n          <div className=\"loginGroup\">\r\n            <div className=\"subtitle\">{players[0].name} <span style={{color:'#ff3434'}}>VS</span> {players[1].name}</div>\r\n            <div style={{marginLeft: '1rem'}}>\r\n            <LargeIconButton variant=\"outlined\" onClick={this.handlePlayClick}>\r\n              <FaGamepad />\r\n            </LargeIconButton>\r\n            </div>\r\n            <div>\r\n            <ExitIconButton variant=\"outlined\" onClick={this.handleLeaveClick}>\r\n              <ExitToAppIcon />\r\n            </ExitIconButton>\r\n            </div>\r\n            </div>\r\n      </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default StyledRoom;","import React from \"react\";\r\n\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { IconButton, withStyles }from \"@material-ui/core\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nconst LargeIconButton = withStyles({\r\n  root:{\r\n    '& svg': {\r\n      fontSize: 50,\r\n      color: '#adadad'\r\n    },\r\n    '&:hover svg': {\r\n      fontSize: 50,\r\n      color: '#ff3434'\r\n    }\r\n  }\r\n})(IconButton);\r\n\r\nconst OnlineExit = ({ exitButtonLabel, playerName, onExit }) => (\r\n  <div>\r\n    <div className=\"title\">Minesweeper Battle</div>\r\n    <div className=\"flexGroup\">\r\n    <div className=\"subtitle\">Welcome, { playerName }</div>\r\n      <div>\r\n          <LargeIconButton onClick={onExit}>\r\n            <ExitToAppIcon />\r\n          </LargeIconButton>\r\n      </div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default OnlineExit;","import React, { Component, Fragment } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Error from \"../../Error\";\r\nimport OnlineLogin from \"../OnlineLogin\";\r\nimport OnlineRoom from \"../OnlineRoom\";\r\nimport OnlineExit from \"../OnlineExit\";\r\nimport LoadingPage from \"../../LoadingPage\";\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport \"./onlinelobby.css\";\r\nimport ExitToAppIcon from \"@material-ui/icons/ExitToApp\";\r\nimport { IconButton, withStyles } from \"@material-ui/core\";\r\nimport { Link as RouterLink } from 'react-router-dom';\r\n\r\nconst selectGameName = props => props.gameComponents[0].game.name;\r\n\r\nconst LargeIconButton = withStyles({\r\n  root: {\r\n    '& svg': {\r\n      fontSize: 50,\r\n      color: '#adadad'\r\n    },\r\n    '&:hover svg': {\r\n      fontSize: 50,\r\n      color: '#ff3434'\r\n    }\r\n  }\r\n})(IconButton);\r\nconst TTTIconButton = LargeIconButton;\r\nconst selectAllPlayersNames = props => {\r\n  const playersNames = [];\r\n  if (!Array.isArray(props.gameInstances)) {\r\n    return playersNames;\r\n  }\r\n\r\n  props.gameInstances.forEach(gameInstance => {\r\n    gameInstance.players.forEach(player => {\r\n      if (player.name) {\r\n        playersNames.push(player.name);\r\n      }\r\n    });\r\n  });\r\n\r\n  return playersNames;\r\n};\r\n\r\nclass OnlineLobby extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { join: 0,\r\n      justleave: 0,\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    // Refresh all rooms every 15 seconds\r\n    setInterval(this.handleRefreshRoomsClick, 15000);\r\n    if (!this.props.gameInstances[0]) {\r\n      this.handleCreateRoomClick();\r\n    }\r\n  }\r\n\r\n  handleLoginClick = name => {\r\n    this.props.onEnterLobby(name);\r\n  };\r\n\r\n  findCurrentPlayerGame = () => {\r\n    const { gameInstances, playerName } = this.props;\r\n    return gameInstances.filter(gameInstance =>\r\n      gameInstance.players.some(player => player.name === playerName)\r\n    );\r\n  }\r\n     reload() {\r\n      window.location.reload();\r\n    }\r\n  handleLogoutClick = () => {\r\n    const currentPlayerGames = this.findCurrentPlayerGame();\r\n    currentPlayerGames.forEach(game => this.handleLeaveRoomClick(game.gameID));\r\n    this.props.onExitLobby();\r\n  };\r\n\r\n  handleCreateRoomClick = () => {\r\n    this.props.onCreateRoom(selectGameName(this.props), 2);\r\n  };\r\n\r\n  handleRefreshRoomsClick = () => {\r\n    this.props.onRefreshRooms();\r\n  };\r\n\r\n  handleJoinRoomClick = (gameId, playerId) => {\r\n    this.props.onJoinRoom(selectGameName(this.props), gameId, playerId);\r\n  };\r\n\r\n  handleLeaveRoomClick = gameId => {\r\n    this.props.onLeaveRoom(selectGameName(this.props), gameId);\r\n  };\r\n\r\n  handlePlayClick = (gameId, playerId, numPlayers) => {\r\n    this.props.onStartGame(selectGameName(this.props), {\r\n      gameID: gameId,\r\n      playerID: playerId,\r\n      numPlayers\r\n    });\r\n  };\r\n\r\n  handleSpectateClick = (gameId, numPlayers) => {\r\n    this.props.onStartGame(selectGameName(this.props), {\r\n      gameID: gameId,\r\n      numPlayers\r\n    });\r\n  };\r\n\r\n  handleExitRoomClick = () => {\r\n    this.props.onExitRoom();\r\n  };\r\n\r\n  componentDidUpdate = (prevProps) => {\r\n    if (prevProps.gameInstances !== this.props.gameInstances && this.state.join) {\r\n      this.autoJoin();\r\n      this.state.join = 0;\r\n    }\r\n  }\r\n\r\n  findFreeSeat = players => players.find(player => !player.name);\r\n\r\n  autoJoin = () => {\r\n    let i = 0;\r\n    let create = 1;\r\n    while (this.props.gameInstances[i]) {\r\n      console.log(this.props.gameInstances[i].players);\r\n      if (this.findFreeSeat(this.props.gameInstances[i].players)) {\r\n        create = 0;\r\n        console.log(this.findFreeSeat(this.props.gameInstances[i].players).id);\r\n        console.log(this.props.gameInstances[i].gameID);\r\n        this.handleJoinRoomClick(this.props.gameInstances[i].gameID, this.findFreeSeat(this.props.gameInstances[i].players).id);\r\n        return;\r\n      }\r\n      i++;\r\n    }\r\n    if (create) {\r\n      this.handleCreateRoomClick();\r\n      this.state.join = 1;\r\n    }\r\n  };\r\n\r\n  exitAndLeaveRoom = () =>{\r\n    this.state.justleave = 1;\r\n    this.handleExitRoomClick();\r\n    this.handleLeaveRoomClick(this.props.runningGame.gameID);\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      errorMsg,\r\n      phase,\r\n      playerName,\r\n      gameInstances,\r\n      runningGame\r\n    } = this.props;\r\n\r\n    if (errorMsg) {\r\n      return (\r\n        <div>\r\n          error: {errorMsg}\r\n          <LargeIconButton onClick={this.reload}> <RefreshIcon/></LargeIconButton>\r\n        </div>\r\n      );\r\n    }\r\n    console.log(this.props);\r\n    console.log(phase);\r\n    if (phase === \"enter\") {\r\n      \r\n      return (\r\n        <OnlineLogin\r\n          playerName={playerName}\r\n          playersNames={selectAllPlayersNames(this.props)}\r\n          onLogin={this.handleLoginClick}\r\n        />\r\n      );\r\n    }\r\n    console.log(gameInstances);\r\n    console.log(this.findCurrentPlayerGame()[0]);\r\n   /* if (phase === \"list\" && (!gameInstances[0]) ) {\r\n      return <LoadingPage />;\r\n    }*/\r\n    if (phase === \"list\" && gameInstances[0] ) {\r\n      if (this.findCurrentPlayerGame()[0] && (!this.state.justleave)) {\r\n        return (\r\n          <OnlineRoom\r\n            key={this.findCurrentPlayerGame()[0].gameID}\r\n            name={`Territories ${this.findCurrentPlayerGame()[0].gameID.substring(0, 3)}`}\r\n            roomId={this.findCurrentPlayerGame()[0].gameID}\r\n            players={this.findCurrentPlayerGame()[0].players}\r\n            playerName={playerName}\r\n            alreadyJoined={selectAllPlayersNames(this.props).includes(\r\n              playerName\r\n            )}\r\n            onJoin={this.handleJoinRoomClick}\r\n            onLeave={this.handleLeaveRoomClick}\r\n            onPlay={this.handlePlayClick}\r\n            onSpectate={this.handleSpectateClick}\r\n          />\r\n        );\r\n      } else {\r\n        this.state.justleave = 0;\r\n        return (\r\n          <div className=\"center\">\r\n            <OnlineExit\r\n              exitButtonLabel=\"logout\"\r\n              playerName={playerName}\r\n              onExit={this.handleLogoutClick}\r\n            />\r\n            <div className=\"margin\"><Button className=\"button\" onClick={this.autoJoin}>START Pairing</Button></div>\r\n          </div>\r\n        )\r\n      }\r\n    }  \r\n    if (phase === \"play\") {\r\n      return (\r\n        <div className=\"center\">\r\n          <div className=\"flexGroup\">\r\n          <div className=\"titleSmaller\">MineSweeper Battle</div>\r\n              <TTTIconButton onClick={this.exitAndLeaveRoom}>\r\n                <ExitToAppIcon />\r\n              </TTTIconButton>\r\n          </div>\r\n          {runningGame && (\r\n            <runningGame.app\r\n              gameID={runningGame.gameID}\r\n              playerID={runningGame.playerID}\r\n              credentials={runningGame.credentials}\r\n            />\r\n          )}\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <LoadingPage/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default OnlineLobby;","import React from \"react\";\r\nimport Game from \"../MineSweeper/Minesweeper\";\r\nimport { Lobby } from \"boardgame.io/react\";\r\n\r\nimport LoadingPage from \"../LoadingPage\";\r\n\r\nimport OnlineLobby from \"../Lobby/OnlineLobby\";\r\nimport Board from \"../MineSweeper/GameBoard\";\r\n\r\n\r\nconst url = process.env.REACT_APP_SERVER_URL\r\nconst OnlineLobbyPage = () => (\r\n  <Lobby\r\n    gameServer={url}\r\n    lobbyServer={url}\r\n    gameComponents={[\r\n      {\r\n        game: Game,\r\n        board: Board\r\n      }\r\n    ]}\r\n    renderer={({\r\n      errorMsg,\r\n      lobbyServer,\r\n      gameComponents,\r\n      rooms,\r\n      phase,\r\n      playerName,\r\n      runningGame,\r\n      handleEnterLobby,\r\n      handleExitLobby,\r\n      handleCreateRoom,\r\n      handleJoinRoom,\r\n      handleLeaveRoom,\r\n      handleExitRoom,\r\n      handleRefreshRooms,\r\n      handleStartGame\r\n    }) => (\r\n      <OnlineLobby\r\n        server={lobbyServer}\r\n        errorMsg={errorMsg}\r\n        gameComponents={gameComponents}\r\n        gameInstances={rooms}\r\n        phase={phase}\r\n        playerName={playerName}\r\n        runningGame={runningGame}\r\n        onEnterLobby={handleEnterLobby}\r\n        onExitLobby={handleExitLobby}\r\n        onCreateRoom={handleCreateRoom}\r\n        onJoinRoom={handleJoinRoom}\r\n        onLeaveRoom={handleLeaveRoom}\r\n        onExitRoom={handleExitRoom}\r\n        onRefreshRooms={handleRefreshRooms}\r\n        onStartGame={handleStartGame}\r\n      />\r\n    )}\r\n  />\r\n);\r\n\r\nexport default OnlineLobbyPage;","const x = 16;\r\nconst y = 9;\r\n\r\nconst createRandomMinedArray = () => {\r\n    const arr = Array(x * y).fill(null);\r\n    return arr;\r\n}\r\n\r\nconst createArroundMineValueArray = (mine) => {\r\n    const arr = Array(x * y).fill(null);\r\n    for (let i = 0; i < mine.length; i++) {\r\n        for (let j = 0; j < mine[i]; j++) {\r\n            var id = 0\r\n            do {\r\n                id = Math.floor(Math.random() * x * y);\r\n            } while (arr[id] != null)\r\n            arr[id] = i + 1;\r\n        }\r\n    }\r\n    return arr;\r\n}\r\n\r\nconst calculateMinesAround = (cells, mineValue, id) => {\r\n    let mines = 0;\r\n    if (mineValue[id - 1] && mineValue[id - 1] > 0 && (id % x != 0)) {\r\n        mines = mines + mineValue[id - 1];\r\n    }\r\n    if (mineValue[id + 1] && mineValue[id + 1] > 0 && (id % x != x - 1)) {\r\n        mines = mines + mineValue[id + 1];\r\n    }\r\n    if (mineValue[id + x - 1] && mineValue[id + x - 1] > 0 && (id % x != 0)) {\r\n        mines = mines + mineValue[id + x - 1];\r\n    }\r\n    if (mineValue[id + x] && mineValue[id + x] > 0) {\r\n        mines = mines + mineValue[id + x];\r\n    }\r\n    if (mineValue[id + x + 1] && mineValue[id + x + 1] > 0 && (id % x != x - 1)) {\r\n        mines = mines + mineValue[id + x + 1];\r\n    }\r\n    if (mineValue[id - x - 1] && mineValue[id - x - 1] > 0 && (id % x != 0)) {\r\n        mines = mines + mineValue[id - x - 1];\r\n    }\r\n    if (mineValue[id - x] && mineValue[id - x] > 0) {\r\n        mines = mines + mineValue[id - x];\r\n    }\r\n    if (mineValue[id - x + 1] && mineValue[id - x + 1] > 0 && (id % x != x - 1)) {\r\n        mines = mines + mineValue[id - x + 1];\r\n    }\r\n    return mines;\r\n}\r\nconst perSweep = (mineValue, id, cells, hp, cPlayer, currentValue) => {\r\n    if (cells[id] || cells[id] == 0) {\r\n\r\n    } else if (mineValue[id] > 0) {\r\n        cells[id] = calculateMinesAround(cells, mineValue, id);\r\n        console.log('mine' + '+' + cells[id] + '+' + mineValue[id]);\r\n        hp[cPlayer] = hp[cPlayer] - mineValue[id];\r\n        if (hp[cPlayer] < 0) {\r\n            hp[cPlayer] = 0;\r\n        }\r\n        currentValue[id] = 1;\r\n    } else {\r\n        cells[id] = calculateMinesAround(cells, mineValue, id);\r\n    }\r\n}\r\nconst end = (hp, cells) => {\r\n    let full = true\r\n    for (let i = 0; i < x * y; i++) {\r\n        if (cells[i] == null) {\r\n            full = false\r\n            break;\r\n        }\r\n    }\r\n    if (hp[0] <= 0)\r\n        return { winner: 1 };\r\n    else if (hp[1] <= 0)\r\n        return { winner: 0 };\r\n    else if (full) {\r\n        if (hp[0] < hp[1])\r\n            return { winner: 1 };\r\n        else if (hp[1] < hp[0])\r\n            return { winner: 0 };\r\n        else\r\n            return { winner: 1 };\r\n    }\r\n    return false;\r\n}\r\n\r\nconst Minesweeper = {\r\n    name: 'minesweeper',\r\n    setup: () => ({\r\n        cells: createRandomMinedArray(),\r\n        mineValue: createArroundMineValueArray([6, 4, 2]),\r\n        randomMine: [6, 4, 2],\r\n        presetPlayersMine: [1, 1, 1, 1, 1],\r\n        playersMine: [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n        currentValue: Array(x * y).fill(null),\r\n        currentMine: null,\r\n        numPlayers: 2,\r\n        hp: Array(2).fill(10),\r\n        boardx: x,\r\n        boardy: y,\r\n        gameover: null\r\n    }),\r\n    moves: {\r\n        sweep(G, ctx, id) {\r\n            let cells = [...G.cells];\r\n            let mineValue = [...G.mineValue];\r\n            let currentValue = [...G.currentValue];\r\n            let cPlayer = ctx.currentPlayer;\r\n            let hp = [...G.hp];\r\n            currentValue[id] = 0;\r\n            perSweep(mineValue, id, cells, hp, cPlayer, currentValue);\r\n            if (id % x != x - 1) {\r\n                perSweep(mineValue, id + 1, cells, hp, cPlayer, currentValue);\r\n                //perSweep(mineValue, id+x+1, cells, hp, cPlayer, currentValue);\r\n                //perSweep(mineValue, id-x+1, cells, hp, cPlayer, currentValue);\r\n            }\r\n            if (id % x != 0) {\r\n                perSweep(mineValue, id - 1, cells, hp, cPlayer, currentValue);\r\n                //perSweep(mineValue, id+x-1, cells, hp, cPlayer, currentValue);\r\n                //perSweep(mineValue, id-x-1, cells, hp, cPlayer, currentValue);\r\n            }\r\n            perSweep(mineValue, id + x, cells, hp, cPlayer, currentValue);\r\n            perSweep(mineValue, id - x, cells, hp, cPlayer, currentValue);\r\n            return { ...G, cells, mineValue, hp, currentValue };\r\n        },\r\n        selectMine(G, ctx, value) {\r\n            let currentMine = G.currentMine;\r\n            console.log('select');\r\n            if (currentMine == value) {\r\n                currentMine = null;\r\n            } else {\r\n                currentMine = value;\r\n            }\r\n            return { ...G, currentMine };\r\n        },\r\n\r\n        placeMine(G, ctx, id, value) {\r\n            let mineValue = [...G.mineValue];\r\n            let cPlayer = ctx.currentPlayer;\r\n            let playersMine = [...G.playersMine];\r\n            let currentMine = value || G.currentMine;\r\n            mineValue[id] = mineValue[id] + currentMine;\r\n            playersMine[cPlayer * 5 + currentMine - 1]--;\r\n            currentMine = null;\r\n            return { ...G, mineValue, currentMine, playersMine };\r\n        },\r\n        changeBoardShowing(G, ctx, id) {\r\n            let currentValue = [...G.currentValue];\r\n            let a = currentValue[id];\r\n            a = a ^ 1;\r\n            currentValue[id] = a;\r\n            return { ...G, currentValue };\r\n        }\r\n    },\r\n    turn: {\r\n        onEnd: (G, ctx) => {\r\n            G.gameover = end(G.hp, G.cells);\r\n            if (G.gameover) {\r\n                for (let i = 0; i < x * y; i++) {\r\n                    G.cells[i] = calculateMinesAround(G.cells, G.mineValue, i);\r\n                    G.currentValue[i] = 0;\r\n                    if (G.mineValue[i])\r\n                        G.currentValue[i] = 1;\r\n                }\r\n            }\r\n        },\r\n    },\r\n    endIf: (G, ctx) => {\r\n    },\r\n};\r\n\r\nexport default Minesweeper;","var _ = require('lodash');\r\n\r\nclass Node {\r\n  constructor(game, parent, move, depth, mcts) {\r\n    this.game = game;\r\n    this.mcts = mcts;\r\n    this.parent = parent;\r\n    this.move = move;\r\n    this.wins = [];\r\n    this.visits = 0;\r\n    this.children = null;\r\n    this.depth = depth || 0;\r\n  }\r\n\r\n  getUCB1(player) {\r\n    let scorePerVisit = 0;\r\n    // always visit unvisited nodes first\r\n    if (this.visits == 0) return Infinity;\r\n    if (!this.parent) {\r\n      return 0;\r\n    }\r\n    scorePerVisit = (this.wins[player] || 0) / this.visits;\r\n    return scorePerVisit + Math.sqrt(2 * Math.log(this.parent.visits) / this.visits);\r\n  }\r\n\r\n  getChildren() {\r\n    if (this.children === null) {\r\n      if (this.move !== null) {\r\n        this.performMove(this.move);\r\n        // console.log(\"move\");\r\n        // console.log(this.move)\r\n        // console.log(this.game.G.cells)\r\n        //console.log(this.game.G.hp)\r\n        //console.log(this.game.G.mineValue)\r\n        //console.log(this.depth+\" \"+this.move)\r\n      }\r\n      var moves = this.getPossibleMoves();\r\n      this.children = []\r\n      for (let i = 0; i < moves.length; i++) {\r\n        let node = new Node(_.cloneDeep(this.game), this, moves[i], this.depth + 1, this.mcts)\r\n        this.children.push(node)\r\n      }\r\n      //console.log(this.children)\r\n    }\r\n    return this.children;\r\n  }\r\n\r\n  getWinner() {\r\n    // forces the move to be performed\r\n    this.getChildren();\r\n    let x = this.game.G.boardx\r\n    let y = this.game.G.boardy\r\n    let full = true\r\n    for (let i = 0; i < x * y; i++) {\r\n      if (this.game.G.cells[i] == null) {\r\n        full = false\r\n        break;\r\n      }\r\n    }\r\n    /*if (this.parent && this.parent.children.length < (x * y / 3)) {\r\n     \r\n      if (this.game.G.hp[0] <= 0) {\r\n        return 1;\r\n      }\r\n      else if (this.game.G.hp[1] <= 0) {\r\n        return 0;\r\n      }\r\n      else {\r\n        if (full) {\r\n          if (this.game.G.hp[0] < this.game.G.hp[1])\r\n            return { winner: 1 };\r\n          else if (this.game.G.hp[1] < this.game.G.hp[0])\r\n            return { winner: 0 };\r\n          else\r\n            return { winner: 1 };\r\n        } else {\r\n          //console.log(this.game.G.cells)\r\n        }\r\n      }\r\n    }\r\n    else {*/\r\n      if (this.game.G.hp[0] <= this.mcts.orginalhp[0] - 1 || this.game.G.hp[0] <= 0) {\r\n        return 1;\r\n      }\r\n      else if (this.game.G.hp[1] <= this.mcts.orginalhp[1] - 1 || this.game.G.hp[1] <= 0) {\r\n        return 0;\r\n      }\r\n      else {\r\n        if (full) {\r\n          if (this.game.G.hp[0] < this.game.G.hp[1])\r\n            return { winner: 1 };\r\n          else if (this.game.G.hp[1] < this.game.G.hp[0])\r\n            return { winner: 0 };\r\n          else\r\n            return { winner: 1 };\r\n        } else {\r\n          //console.log(this.game.G.cells)\r\n        }\r\n     // }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  nextMove() {\r\n    return _(this.getChildren()).shuffle().sortBy(this.mcts.nodeSort).last();\r\n  }\r\n\r\n  getPossibleMoves() {\r\n    let moves = []\r\n\r\n    //console.log(this.haveMine())\r\n    //console.log(this.game.G.playersMine);\r\n    //console.log(this.game.G.mineValue.length)\r\n    //console.log(1 - Math.abs(this.mcts.player - this.depth % 2));\r\n    if (this.haveMine()) {\r\n      for (let i = 0; i < this.game.G.mineValue.length * 2; i++) {\r\n        if (i < this.game.G.mineValue.length) {\r\n          if (this.game.G.cells[i] == null) {\r\n            moves.push(i)\r\n          }\r\n        } else {\r\n          if (this.placeActive(i - this.game.G.mineValue.length)) {\r\n            moves.push(i)\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      for (let i = 0; i < this.game.G.mineValue.length; i++) {\r\n        if (i < this.game.G.mineValue.length) {\r\n          if (this.game.G.cells[i] == null) {\r\n            moves.push(i)\r\n          }\r\n        }\r\n      }\r\n    }\r\n    //console.log(moves);\r\n    //console.log(moves);\r\n    //console.log(moves)\r\n    moves = _.shuffle(moves);\r\n    //console.log(moves)\r\n\r\n    return moves;\r\n  }\r\n  haveMine() {\r\n    let cPlayer = Math.abs(this.mcts.player - this.depth % 2)\r\n    //console.log(cPlayer)\r\n    let sum = 0\r\n    for (let i = 5 * cPlayer; i < 5 * cPlayer + 5; i++) {\r\n      sum = sum + this.game.G.playersMine[i]\r\n    }\r\n    if (sum > 0) return true\r\n    return false\r\n  }\r\n  placeActive = (id) => {\r\n    if (this.game.G.cells[id] || this.game.G.cells[id] == 0) return false;\r\n    if ((this.game.G.cells[id - 1] || this.game.G.cells[id - 1] == 0) && (id % this.game.G.boardx != 0)) return false;\r\n    if ((this.game.G.cells[id + 1] || this.game.G.cells[id + 1] == 0) && (id % this.game.G.boardx != this.game.G.boardx - 1)) return false;\r\n    if ((this.game.G.cells[id + this.game.G.boardx - 1] || this.game.G.cells[id + this.game.G.boardx - 1] == 0) && (id % this.game.G.boardx != 0)) return false;\r\n    if (this.game.G.cells[id + this.game.G.boardx] || this.game.G.cells[id + this.game.G.boardx] == 0) return false;\r\n    if ((this.game.G.cells[id + this.game.G.boardx + 1] || this.game.G.cells[id + this.game.G.boardx + 1] == 0) && (id % this.game.G.boardx != this.game.G.boardx - 1)) return false;\r\n    if ((this.game.G.cells[id - this.game.G.boardx - 1] || this.game.G.cells[id - this.game.G.boardx - 1] == 0) && (id % this.game.G.boardx != 0)) return false;\r\n    if (this.game.G.cells[id - this.game.G.boardx] || this.game.G.cells[id - this.game.G.boardx] == 0) return false;\r\n    if ((this.game.G.cells[id - this.game.G.boardx + 1] || this.game.G.cells[id - this.game.G.boardx + 1] == 0) && (id % this.game.G.boardx != this.game.G.boardx - 1)) return false;\r\n    return true;\r\n  }\r\n  performMove(id) {\r\n    let cPlayer = 1 - Math.abs(this.mcts.player - this.depth % 2)\r\n    //console.log(cPlayer)\r\n    if (id < this.game.G.mineValue.length) {\r\n      let x = this.game.G.boardx\r\n      this.game.G.cells[id] = this.calculateMinesAround(id)\r\n      if (this.mcts.inBoard(id + 1) && (id % x != x - 1) && this.game.G.cells[id + 1] == null) this.game.G.cells[id + 1] = this.calculateMinesAround(id + 1)\r\n      if (this.mcts.inBoard(id - 1) && (id % x != 0) && this.game.G.cells[id - 1] == null) this.game.G.cells[id - 1] = this.calculateMinesAround(id - 1)\r\n      if (this.mcts.inBoard(id + x) && this.game.G.cells[id + x] == null) this.game.G.cells[id + x] = this.calculateMinesAround(id + x)\r\n      if (this.mcts.inBoard(id - x) && this.game.G.cells[id - x] == null) this.game.G.cells[id - x] = this.calculateMinesAround(id - x)\r\n    } else {\r\n      id = id - this.game.G.mineValue.length\r\n      let mineValue = 0\r\n      //console.log(this.game.G.playersMine)\r\n      do {\r\n        mineValue = Math.floor(Math.random() * 5)\r\n      } while (this.game.G.playersMine[cPlayer * 5 + mineValue] <= 0)\r\n      this.game.G.mineValue[id] += mineValue + 1\r\n      this.game.G.playersMine[cPlayer * 5 + mineValue] -= 1\r\n    }\r\n  }\r\n\r\n  calculateMinesAround(id) {\r\n    let mines = 0;\r\n    let x = this.game.G.boardx\r\n    if (this.game.G.mineValue[id - 1] && this.game.G.mineValue[id - 1] > 0 && (id % x != 0)) {\r\n      mines = mines + this.game.G.mineValue[id - 1];\r\n    }\r\n    if (this.game.G.mineValue[id + 1] && this.game.G.mineValue[id + 1] > 0 && (id % x != x - 1)) {\r\n      mines = mines + this.game.G.mineValue[id + 1];\r\n    }\r\n    if (this.game.G.mineValue[id + x - 1] && this.game.G.mineValue[id + x - 1] > 0 && (id % x != 0)) {\r\n      mines = mines + this.game.G.mineValue[id + x - 1];\r\n    }\r\n    if (this.game.G.mineValue[id + x] && this.game.G.mineValue[id + x] > 0) {\r\n      mines = mines + this.game.G.mineValue[id + x];\r\n    }\r\n    if (this.game.G.mineValue[id + x + 1] && this.game.G.mineValue[id + x + 1] > 0 && (id % x != x - 1)) {\r\n      mines = mines + this.game.G.mineValue[id + x + 1];\r\n    }\r\n    if (this.game.G.mineValue[id - x - 1] && this.game.G.mineValue[id - x - 1] > 0 && (id % x != 0)) {\r\n      mines = mines + this.game.G.mineValue[id - x - 1];\r\n    }\r\n    if (this.game.G.mineValue[id - x] && this.game.G.mineValue[id - x] > 0) {\r\n      mines = mines + this.game.G.mineValue[id - x];\r\n    }\r\n    if (this.game.G.mineValue[id - x + 1] && this.game.G.mineValue[id - x + 1] > 0 && (id % x != x - 1)) {\r\n      mines = mines + this.game.G.mineValue[id - x + 1];\r\n    }\r\n    if (this.game.G.mineValue[id] !== null)\r\n      this.game.G.hp[Math.abs(this.mcts.player - this.depth % 2)] -= this.game.G.mineValue[id]\r\n    return mines;\r\n  }\r\n}\r\n\r\n\r\nclass MCTS {\r\n  constructor(game, aiMine) {\r\n    this.aiMine = aiMine\r\n    this.game = _.cloneDeep(game);\r\n    this.orginalMineArray = _.cloneDeep(this.game.G.mineValue);\r\n    this.orginalCells = _.cloneDeep(this.game.G.cells)\r\n    this.nodeSort = function (node) {\r\n      if (node.parent) return node.getUCB1(1 - Math.abs(node.mcts.player - node.parent.depth % 2));\r\n      return 0;\r\n    };\r\n    this.winnerarr = []\r\n    this.orginalhp = _.cloneDeep(this.game.G.hp);\r\n    this.rounds = this.game.ai.time || 15;\r\n    console.log(this.rounds)\r\n    this.player = this.game.ctx.currentPlayer || 0;\r\n    this.rootNode = new Node(this.game, null, null, 0, this);\r\n  }\r\n\r\n  inBoard(id) {\r\n    let x = this.game.G.boardx\r\n    let y = this.game.G.boardy\r\n    if (id >= 0 && id < x * y) return true\r\n    return false\r\n  }\r\n\r\n  fillMinable(id, val, minable) {\r\n    let x = this.game.G.boardx\r\n    if (id % x != 0 && this.inBoard(id - 1 - x)) if (minable[id - 1 - x] === null || minable[id - 1 - x] > val) minable[id - 1 - x] = val;\r\n    if (this.inBoard(id - x)) if (minable[id - x] === null || minable[id - x] > val) minable[id - x] = val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1 - x)) if (minable[id + 1 - x] === null || minable[id + 1 - x] > val) minable[id + 1 - x] = val;\r\n    if (id % x != 0 && this.inBoard(id - 1)) if (minable[id - 1] === null || minable[id - 1] > val) minable[id - 1] = val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1)) if (minable[id + 1] === null || minable[id + 1] > val) minable[id + 1] = val;\r\n    if (id % x != 0 && this.inBoard(id - 1 + x)) if (minable[id - 1 + x] === null || minable[id - 1 + x] > val) minable[id - 1 + x] = val;\r\n    if (this.inBoard(id + x)) if (minable[id + x] === null || minable[id + x] > val) minable[id + x] = val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1 + x)) if (minable[id + 1 + x] === null || minable[id + 1 + x] > val) minable[id + 1 + x] = val;\r\n    return minable;\r\n  }\r\n\r\n  minusCellValue(id, val, cells) {\r\n    let x = this.game.G.boardx\r\n    if (id % x != 0 && this.inBoard(id - 1 - x)) if (cells[id - 1 - x] != null) cells[id - 1 - x] -= val;\r\n    if (this.inBoard(id - x)) if (cells[id - x] != null) cells[id - x] -= val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1 - x)) if (cells[id + 1 - x] != null) cells[id + 1 - x] -= val;\r\n    if (id % x != 0 && this.inBoard(id - 1)) if (cells[id - 1] != null) cells[id - 1] -= val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1)) if (cells[id + 1] != null) cells[id + 1] -= val;\r\n    if (id % x != 0 && this.inBoard(id - 1 + x)) if (cells[id - 1 + x] != null) cells[id - 1 + x] -= val;\r\n    if (this.inBoard(id + x)) if (cells[id + x] != null) cells[id + x] -= val;\r\n    if ((id % x != x - 1) && this.inBoard(id + 1 + x)) if (cells[id + 1 + x] != null) cells[id + 1 + x] -= val;\r\n    return cells;\r\n  }\r\n  randomizeMine() {\r\n    let mine = [0, 0, 0, 0, 0]\r\n    let x = this.game.G.boardx\r\n    let y = this.game.G.boardy\r\n\r\n    // count onBoard Mine\r\n    for (let i = 0; i < 5; i++) {\r\n      if (this.game.G.randomMine[i] != undefined) {\r\n        mine[i] = this.game.G.randomMine[i];\r\n      }\r\n    }\r\n    for (let i = 0; i < 10; i++) {\r\n      if (i < 5) {\r\n        mine[i] += this.game.G.presetPlayersMine[i] - this.game.G.playersMine[i];\r\n      } else {\r\n        mine[i - 5] += this.game.G.presetPlayersMine[i - 5] - this.game.G.playersMine[i];\r\n      }\r\n    }\r\n\r\n    let randomWrongFlag = false\r\n    let randomizeBoardAIMine = Array(x * y).fill(null);\r\n    //aiMine place\r\n    for (let i = 0; i < this.aiMine.length; i++) {\r\n      randomizeBoardAIMine[this.aiMine[i][0]] += this.aiMine[i][1]\r\n      mine[this.aiMine[i][1] - 1] -= 1\r\n    }\r\n    let randomizeBoard = randomizeBoardAIMine\r\n\r\n\r\n    // found minable place\r\n    /*let knownMine = Array(x * y).fill(null);\r\n      for (let i = 0; i < knownMine.length; i++) {\r\n        if (this.orginalCells[i] != null && this.orginalMineArray[i] != null)\r\n          knownMine[i] = this.orginalMineArray[i];\r\n    }\r\n    console.log(knownMine);\r\n    */\r\n   let minable = Array(x * y).fill(null);\r\n    do {\r\n      randomWrongFlag = false\r\n      let cells = _.cloneDeep(this.orginalCells)\r\n      // initize randomize board\r\n      randomizeBoard = randomizeBoardAIMine\r\n      //random process\r\n      for (let i = mine.length - 1; i >= 0; i--) {\r\n        for (let j = 0; j < mine[i]; j++) {\r\n          // minable place and it maximum value\r\n          minable = Array(x * y).fill(null);\r\n          for (let id = 0; id < minable.length; id++) {\r\n            if (cells[id] >= 0 && cells[id] != null) {\r\n              minable = this.fillMinable(id, cells[id], minable)\r\n            }\r\n          }\r\n          let minableRandomID = []\r\n          let nullArray = []\r\n          // init the random list (adjust weighting, larger value have a largest weighting)\r\n          for (let id = 0; id < minable.length; id++) {\r\n            if (minable[id] >= i + 1) {\r\n              for (let k = 0; k < minable[id]; k++) {\r\n                // weighting higher\r\n                for (let m = 0; m < 10; m++)\r\n                  minableRandomID.push(id);\r\n              }\r\n            } else if (minable[id] == null) {\r\n              nullArray.push(id);\r\n            }\r\n          }\r\n          if (nullArray.length != 0)\r\n            for (let k = 0; k < 2; k++)\r\n              minableRandomID.push(-1);\r\n\r\n          // check error (if yes loop again)\r\n          if (minableRandomID.length == 0) {\r\n            randomWrongFlag = true;\r\n            break;\r\n          }\r\n          //random choose 1 in list\r\n          let item = minableRandomID[Math.floor(Math.random() * minableRandomID.length)];\r\n          if (item == -1)\r\n            randomizeBoard[nullArray[Math.floor(Math.random() * nullArray.length)]] += 1 + 1\r\n          else\r\n            randomizeBoard[item] += i + 1;\r\n          // surrounded minable value minus val\r\n          cells = this.minusCellValue(item, i + 1, cells);\r\n        }\r\n        if (randomWrongFlag) {\r\n          break;\r\n        }\r\n      }\r\n      /*if (!randomWrongFlag)\r\n        for (let i = 0; i< x*y; i++){\r\n          if (knownMine[i] !== null) {\r\n            if (knownMine[i] !== randomizeBoard[i]){\r\n              randomWrongFlag = true;\r\n              break;\r\n            }\r\n          }\r\n        }*/\r\n    } while (randomWrongFlag);\r\n    for(let i = 0; i < x*y; i++){\r\n      if (minable[i] == null && randomizeBoard[i] == null){\r\n        if (Math.floor(Math.random()* 3)){\r\n          randomizeBoard[i] = 1;\r\n        }\r\n      }\r\n    }\r\n    this.game.G.mineValue = _.cloneDeep(randomizeBoard)\r\n    //return finish randomize board\r\n    return;\r\n  }\r\n\r\n  selectMove() {\r\n    let round, currentNode;\r\n    var d = new Date();\r\n    var start = d.getTime();\r\n    var i = 0\r\n    do {\r\n      i += 1\r\n      d = new Date();\r\n      var end = d.getTime();\r\n      //for (round = 0; round < this.rounds; round += 1) {\r\n      currentNode = this.rootNode;\r\n      this.rootNode.visits += 1;\r\n      this.randomizeMine();\r\n      while (!_.isEmpty(currentNode.getChildren())) {\r\n        currentNode = currentNode.nextMove();\r\n        currentNode.visits += 1;\r\n        if (currentNode.getWinner() === 0 || currentNode.getWinner() === 1)\r\n          break;\r\n      }\r\n      let winner = currentNode.getWinner();\r\n      this.winnerarr.push(winner)\r\n      while (currentNode) {\r\n        currentNode.wins[winner] = (currentNode.wins[winner] || 0) + 1;\r\n        currentNode = currentNode.parent;\r\n      }\r\n      //console.log(i)\r\n    } while (end - start < this.rounds * 1000)\r\n    var count0 = 0;\r\n    var count1 = 0;\r\n    for (var i = 0; i < this.winnerarr.length; ++i) {\r\n      if (this.winnerarr[i] == 0)\r\n        count0++;\r\n      else\r\n        count1++\r\n    }\r\n    console.log(_(this.rootNode.getChildren()).sortBy('visits').last().wins)\r\n    console.log(\"loop \" + i)\r\n    console.log(this.rootNode.children.length)\r\n    console.log(_(this.rootNode.getChildren()).sortBy('visits').last().visits)\r\n    return _(this.rootNode.getChildren()).sortBy('visits').last().move;\r\n  }\r\n}\r\nexport default MCTS;","import React, { Component } from 'react';\nimport './GameBoard.css';\nimport {  LoopCircleLoading } from 'react-loadingg';\nimport MCTS from '../AI/MCTS'\nclass GameBoard extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            aiMine:[[],[]],\n            aiFirstMove:false\n        }\n    }\n    componentDidMount(prevProps){\n        if ((this.props.ai !== undefined|| this.props.bothai )&& this.props.ctx.turn == 1 && !this.props.aiFirstMove){\n            if (this.isAITurn()){\n                this.setState({aiFirstMove : true})\n                console.log(this.props.ctx.currentPlayer)\n                setTimeout(() => {\n                    this.AImove()\n                }, 1000);\n            }\n        }\n    }\n    componentDidUpdate(prevProps){\n        if ((this.props.ai !== undefined || this.props.bothai) && prevProps.ctx.currentPlayer != this.props.ctx.currentPlayer && !this.props.G.gameover){\n            if (this.isAITurn()){\n                console.log(this.props.ctx.currentPlayer)\n                setTimeout(() => {\n                    this.AImove()\n                }, 1000);\n            }\n        }\n    }\n\n    AImove = () => {\n        console.log('AITURN')\n        let mcts = new MCTS(this.props, this.state.aiMine[this.props.ctx.currentPlayer])\n        var id = mcts.selectMove();\n        if (id < this.props.G.mineValue.length){\n            console.log(\"sweep \"+id)\n            this.props.moves.sweep(id);\n        } else {\n            let value = 0\n            do{\n                value = Math.floor(Math.random() * 5)\n            }while (this.props.G.playersMine[this.props.ctx.currentPlayer * 5 + value] == 0)\n            this.state.aiMine[this.props.ctx.currentPlayer].push([id- this.props.G.boardx *this.props.G.boardy,value+1])\n            console.log(this.state.aiMine);\n            this.props.moves.placeMine(id- this.props.G.boardx *this.props.G.boardy, value + 1);\n        }\n        this.props.events.endTurn();\n    }\n\n    onClick = (id, a) => {\n        if (this.isActive() && this.isMyTurn()) {\n            if (!this.props.G.currentMine) {\n                if (this.sweepActive(id)) {\n                    this.props.moves.sweep(id);\n                    this.props.events.endTurn();\n                } else {\n                    if (this.props.G.mineValue[id] && this.props.G.cells[id] != 0) {\n                        this.props.moves.changeBoardShowing(id);\n                        //console.log('change');\n                    }\n                }\n            } else {\n                if (this.placeActive(id)) {\n                    this.props.moves.placeMine(id);\n                    this.props.events.endTurn();\n                }\n            }\n        } else if (this.props.G.mineValue[id] && this.props.G.cells[id] != 0) {\n            this.props.moves.changeBoardShowing(id);\n            //console.log('change');\n        }\n    }\n    selectMine = (value) => {\n        if (this.isActive() && this.selectActive(value)) {\n            this.props.moves.selectMine(value);\n        }\n    }\n\n    isAITurn = () =>{\n        if (this.props.bothai) return true;\n        if (this.props.ai === undefined) return false\n        if (this.props.ai.id == this.props.ctx.currentPlayer) return true;\n        return false;\n    }\n    isMyTurn = () =>{\n        if (this.props.playerID == this.props.ctx.currentPlayer) return true;\n        return false;\n    }\n    isActive = () => {\n        if (this.props.G.gameover) return false;\n        return true;\n    }\n    sweepActive = (id) => {\n        if (this.props.G.cells[id] || this.props.G.cells[id] == 0) return false;\n        return true;\n    }\n    placeActive = (id) => {\n        if (this.props.G.cells[id] || this.props.G.cells[id] == 0) return false;\n        if ((this.props.G.cells[id - 1] || this.props.G.cells[id - 1] == 0) && (id % this.props.G.boardx != 0)) return false;\n        if ((this.props.G.cells[id + 1] || this.props.G.cells[id + 1] == 0) && (id % this.props.G.boardx != this.props.G.boardx - 1)) return false;\n        if ((this.props.G.cells[id + this.props.G.boardx - 1] || this.props.G.cells[id + this.props.G.boardx - 1] == 0) && (id % this.props.G.boardx != 0)) return false;\n        if (this.props.G.cells[id + this.props.G.boardx] || this.props.G.cells[id + this.props.G.boardx] == 0) return false;\n        if ((this.props.G.cells[id + this.props.G.boardx + 1] || this.props.G.cells[id + this.props.G.boardx + 1] == 0) && (id % this.props.G.boardx != this.props.G.boardx - 1)) return false;\n        if ((this.props.G.cells[id - this.props.G.boardx - 1] || this.props.G.cells[id - this.props.G.boardx - 1] == 0) && (id % this.props.G.boardx != 0)) return false;\n        if (this.props.G.cells[id - this.props.G.boardx] || this.props.G.cells[id - this.props.G.boardx] == 0) return false;\n        if ((this.props.G.cells[id - this.props.G.boardx + 1] || this.props.G.cells[id - this.props.G.boardx + 1] == 0) && (id % this.props.G.boardx != this.props.G.boardx - 1)) return false;\n        return true;\n    }\n    selectActive = (value) => {\n        if (this.props.G.playersMine[value + this.props.ctx.currentPlayer * 5 - 1] == 0) return false;\n        return true;\n    }\n\n    isSelected = (value) => {\n        if (this.props.G.currentMine == value) return true;\n        return false;\n    }\n    isCurrentValue = (value) => {\n        if (this.props.G.currentValue[value]) return true;\n        return false;\n    }\n    changeable = (value) => {\n        if (this.props.G.mineValue[value] && this.props.G.cells[value] && this.props.G.cells[value] != 0) return true;\n        return false;\n    }\n    render() {\n        let winner = '';\n        let boardStyle = \"selectDisable gameBoardTable gameBoardCell\";\n        if (this.props.G.currentMine && this.props.ctx.currentPlayer == this.props.playerID) {\n            boardStyle = boardStyle + ' gameBoardSelectedMine';\n        }\n        if (this.props.G.gameover) {\n            winner = this.props.G.gameover.winner\n        }\n        let minebtns = [];\n        let board = [];\n        if (this.props.bothai){\n            minebtns.push(\n                <div key=\"textbtn\" style={{ display: 'flex', flexDirection: 'column', paddingRight: '1rem' }} >\n                    <div style={{ alignSelf: 'flex-end' }}>Mine:</div>\n                    <div style={{ alignSelf: 'flex-end' }}>AI 1:</div>\n                    <div style={{ alignSelf: 'flex-end' }}>AI 2:</div>\n                </div>\n            );\n        }else{\n        minebtns.push(\n            <div key=\"textbtn\" style={{ display: 'flex', flexDirection: 'column', paddingRight: '1rem' }} >\n                <div style={{ alignSelf: 'flex-end' }}>Mine:</div>\n                <div style={{ alignSelf: 'flex-end' }}>Remains:</div>\n                <div style={{ alignSelf: 'flex-end' }}>Opponents:</div>\n            </div>\n        );\n        }\n        //btn\n        for (let i = 1; i < 6; i++) {\n            let mineBtnClass = null;\n            if (this.isSelected(i) && this.props.ctx.currentPlayer == this.props.playerID) {\n                mineBtnClass = \"minebtnStyle selectPressed mineBtnActive\";\n            } else if (this.selectActive(i) && this.isActive(i) && !this.isAITurn() && this.props.ctx.currentPlayer == this.props.playerID) {\n                mineBtnClass = \"minebtnStyle mineBtnActive\";\n            } else {\n                mineBtnClass = \"minebtnStyle\";\n            }\n            if (this.props.bothai){\n                minebtns.push(\n                    <div key={i} className=\"temp\">\n                        <div className={mineBtnClass}\n                            key={i}\n                            onClick={() => this.selectMine(i)}>\n                            {i}\n                        </div>\n                        <div className=\"remainMineValue\">{this.props.G.playersMine[i + 0 * 5 - 1]}</div>\n                        <div className=\"remainMineValue\">{this.props.G.playersMine[i + 1 * 5 - 1]}</div>\n                    </div>\n                );\n            }else{\n            minebtns.push(\n                <div key={i} className=\"temp\">\n                    <div className={mineBtnClass}\n                        key={i}\n                        onClick={() => this.selectMine(i)}>\n                        {i}\n                    </div>\n                    <div className=\"remainMineValue\">{this.props.G.playersMine[i + this.props.playerID * 5 - 1]}</div>\n                    <div className=\"remainMineValue\">{this.props.G.playersMine[i + (1-this.props.playerID) * 5 - 1]}</div>\n                </div>\n            );\n            }\n        }\n        //gameboard\n        for (let i = 0; i < this.props.G.boardy; i++) {\n            let cells = [];\n            for (let j = 0; j < this.props.G.boardx; j++) {\n                const id = i * this.props.G.boardx + j\n                let idClass = null;\n                let valueShow = null;\n                if (this.sweepActive(id) && this.isActive(id)) {\n                    idClass = \"cell cellActive\";\n                } else {\n                    idClass = \"cell\";\n                }\n                if (this.changeable(id)) {\n                    idClass = idClass + \" cellChangeable\";\n                }\n                if (this.isCurrentValue(id)) {\n                    valueShow = this.props.G.mineValue[id];\n                    idClass = idClass + \" showingMineValue\";\n                } else {\n                    if (this.props.G.cells[id] == 0)\n                        valueShow = \"\";\n                    else\n                        valueShow = this.props.G.cells[id];\n                }\n                cells.push(\n                    <td className=\"gameBoardCell\"\n                        key={id}\n                        onClick={() => this.onClick(id)}>\n                        <div className={idClass}>{valueShow}</div>\n                    </td>\n                );\n            }\n            board.push(<tr key={i} className=\"gameBoardCell\">{cells}</tr>);\n        }\n        //console.log(this.props);\n        return (\n            <div>\n                <div>\n                    <div style={{marginBottom:'1rem'}}>\n                    { (!winner && winner !== 0) && (\n                        <div>\n                            <div className=\"flexGroup\">\n                                <div className=\"game-detailgp\">\n                                    <div className=\"game-text\">{this.props.gameMetadata[0].name}</div>\n                                    <div className=\"game-text\">HP: {this.props.G.hp[0]}</div>\n                                </div>\n                                <div className=\"game-vs\">VS</div>\n                                <div className=\"game-detailgp\">\n                                    <div className=\"game-text\">{this.props.gameMetadata[1].name}</div>\n                                    <div className=\"game-text\">HP: {this.props.G.hp[1]}</div>\n                                </div>\n                            </div>\n                            { !this.props.bothai && <div className=\"game-text\">{this.props.playerID == this.props.ctx.currentPlayer && \"Your Turn\"}{this.props.playerID != this.props.ctx.currentPlayer && \"Opponent Turn\"}</div>}\n                            {this.props.bothai && <div className=\"game-text\">{this.props.gameMetadata[this.props.ctx.currentPlayer].name} turn </div>}\n                        </div>\n                    )}\n                    {!this.props.bothai &&\n                        (winner === 0 || winner ) &&\n                        <div className=\"subtitle\">\n                            {winner == this.props.playerID && \"Congratulations, You Win\"}\n                            {winner != this.props.playerID && winner >= 0 && \"Oops, You Lose\"}\n                        </div>\n                    }\n                    {this.props.bothai && (winner === 0 || winner ) &&\n                        <div className=\"subtitle\">\n                            {this.props.gameMetadata[winner].name }win\n                        </div>\n                    }\n                    </div>\n                    {( this.isAITurn() && !this.props.G.gameover && <LoopCircleLoading  color=\"#34ffff\"/>)}\n                    <table id=\"board\" className={boardStyle} style={{ margin: \"0 auto\" }}>\n                        <tbody>{board}</tbody>\n                    </table>\n                </div>\n                <br />\n                <div className=\"minebtnGroups selectDisable game-text\" text-align=\"center\" style={{ display: 'flex', justifyContent: 'center' }}>{minebtns}</div>\n            </div>\n        )\n    }\n}\n\nexport default GameBoard;"],"sourceRoot":""}